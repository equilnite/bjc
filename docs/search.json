[
  {
    "objectID": "create-task/index.html",
    "href": "create-task/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "AP Create Performance Task\nFor this course, you will be working on a project that will be graded both by your teacher and the AP exam scorers.\nThe project is mainly graded based off your understanding of the main ideas of the course (“Computer Science Principles”), through a write-up.\nThe main components of this project"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction\nWelcome to the Beauty and Joy of Computing — BJC.\nThrough this curriculum, you will create programs using the Snap programming language, you will learn some of the most powerful ideas of computer science, and you will discuss the social implications of computing, thinking deeply about how you can be personally active in promoting the benefits and reducing the possible harms.\nUnits 1-5 cover all of the AP CSP curriculum framework. You will be ready for the exam after completing these key units.\nUnits 6-8 focus on the abstraction hierarchy of how computers work as well as recursion, a beautiful and powerful CS idea that goes beyond the AP CSP Framework and exam. These units are perfect to enjoy after the exam."
  },
  {
    "objectID": "unit-1/index.html",
    "href": "unit-1/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-1/lab-1/page-1.html",
    "href": "unit-1/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-1/lab-1/page-1.html#creating-an-account",
    "href": "unit-1/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-1/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-1/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-1/page-2.html",
    "href": "unit-1/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-1/lab-1/page-2.html#making-a-character-move",
    "href": "unit-1/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-1/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-1/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-1/page-3.html",
    "href": "unit-1/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-1/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-1/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html",
    "href": "unit-1/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-1/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html#keeping-score",
    "href": "unit-1/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-1/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html#ending-the-game",
    "href": "unit-1/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-1/page-5.html",
    "href": "unit-1/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/lab-2/page-1.html",
    "href": "unit-1/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-2/page-2.html",
    "href": "unit-1/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-2/page-3.html",
    "href": "unit-1/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-2/page-4.html",
    "href": "unit-1/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-2/page-5.html",
    "href": "unit-1/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/lab-3/page-1.html",
    "href": "unit-1/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-3/page-2.html",
    "href": "unit-1/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-3/page-3.html",
    "href": "unit-1/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-3/page-4.html",
    "href": "unit-1/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-3/page-5.html",
    "href": "unit-1/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/lab-4/page-1.html",
    "href": "unit-1/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-4/page-2.html",
    "href": "unit-1/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-4/page-3.html",
    "href": "unit-1/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-4/page-4.html",
    "href": "unit-1/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-4/page-5.html",
    "href": "unit-1/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/lab-5/page-1.html",
    "href": "unit-1/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-5/page-2.html",
    "href": "unit-1/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-5/page-3.html",
    "href": "unit-1/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-5/page-4.html",
    "href": "unit-1/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-5/page-5.html",
    "href": "unit-1/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/optional-projects/page-1.html",
    "href": "unit-1/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/optional-projects/page-2.html",
    "href": "unit-1/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/optional-projects/page-3.html",
    "href": "unit-1/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/optional-projects/page-4.html",
    "href": "unit-1/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/optional-projects/page-5.html",
    "href": "unit-1/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/index.html",
    "href": "unit-2/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-2/lab-1/page-1.html",
    "href": "unit-2/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-2/lab-1/page-1.html#creating-an-account",
    "href": "unit-2/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-2/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-2/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-1/page-2.html",
    "href": "unit-2/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-2/lab-1/page-2.html#making-a-character-move",
    "href": "unit-2/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-2/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-2/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-1/page-3.html",
    "href": "unit-2/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-2/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-2/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html",
    "href": "unit-2/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-2/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html#keeping-score",
    "href": "unit-2/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-2/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html#ending-the-game",
    "href": "unit-2/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-1/page-5.html",
    "href": "unit-2/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/lab-2/page-1.html",
    "href": "unit-2/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-2/page-2.html",
    "href": "unit-2/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-2/page-3.html",
    "href": "unit-2/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-2/page-4.html",
    "href": "unit-2/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-2/page-5.html",
    "href": "unit-2/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/lab-3/page-1.html",
    "href": "unit-2/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-3/page-2.html",
    "href": "unit-2/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-3/page-3.html",
    "href": "unit-2/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-3/page-4.html",
    "href": "unit-2/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-3/page-5.html",
    "href": "unit-2/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/lab-4/page-1.html",
    "href": "unit-2/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-4/page-2.html",
    "href": "unit-2/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-4/page-3.html",
    "href": "unit-2/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-4/page-4.html",
    "href": "unit-2/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-4/page-5.html",
    "href": "unit-2/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/lab-5/page-1.html",
    "href": "unit-2/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-5/page-2.html",
    "href": "unit-2/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-5/page-3.html",
    "href": "unit-2/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-5/page-4.html",
    "href": "unit-2/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-5/page-5.html",
    "href": "unit-2/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/optional-projects/page-1.html",
    "href": "unit-2/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/optional-projects/page-2.html",
    "href": "unit-2/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/optional-projects/page-3.html",
    "href": "unit-2/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/optional-projects/page-4.html",
    "href": "unit-2/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/optional-projects/page-5.html",
    "href": "unit-2/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/index.html",
    "href": "unit-3/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-3/lab-1/page-1.html",
    "href": "unit-3/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-3/lab-1/page-1.html#creating-an-account",
    "href": "unit-3/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-3/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-3/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-1/page-2.html",
    "href": "unit-3/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-3/lab-1/page-2.html#making-a-character-move",
    "href": "unit-3/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-3/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-3/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-1/page-3.html",
    "href": "unit-3/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-3/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-3/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html",
    "href": "unit-3/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-3/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html#keeping-score",
    "href": "unit-3/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-3/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html#ending-the-game",
    "href": "unit-3/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-1/page-5.html",
    "href": "unit-3/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/lab-2/page-1.html",
    "href": "unit-3/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-2/page-2.html",
    "href": "unit-3/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-2/page-3.html",
    "href": "unit-3/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-2/page-4.html",
    "href": "unit-3/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-2/page-5.html",
    "href": "unit-3/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/lab-3/page-1.html",
    "href": "unit-3/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-3/page-2.html",
    "href": "unit-3/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-3/page-3.html",
    "href": "unit-3/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-3/page-4.html",
    "href": "unit-3/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-3/page-5.html",
    "href": "unit-3/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/lab-4/page-1.html",
    "href": "unit-3/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-4/page-2.html",
    "href": "unit-3/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-4/page-3.html",
    "href": "unit-3/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-4/page-4.html",
    "href": "unit-3/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-4/page-5.html",
    "href": "unit-3/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/lab-5/page-1.html",
    "href": "unit-3/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-5/page-2.html",
    "href": "unit-3/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-5/page-3.html",
    "href": "unit-3/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-5/page-4.html",
    "href": "unit-3/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-5/page-5.html",
    "href": "unit-3/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/optional-projects/page-1.html",
    "href": "unit-3/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/optional-projects/page-2.html",
    "href": "unit-3/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/optional-projects/page-3.html",
    "href": "unit-3/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/optional-projects/page-4.html",
    "href": "unit-3/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/optional-projects/page-5.html",
    "href": "unit-3/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/index.html",
    "href": "unit-4/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-4/lab-1/page-1.html",
    "href": "unit-4/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-4/lab-1/page-1.html#creating-an-account",
    "href": "unit-4/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-4/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-4/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-1/page-2.html",
    "href": "unit-4/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-4/lab-1/page-2.html#making-a-character-move",
    "href": "unit-4/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-4/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-4/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-1/page-3.html",
    "href": "unit-4/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-4/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-4/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html",
    "href": "unit-4/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-4/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html#keeping-score",
    "href": "unit-4/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-4/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html#ending-the-game",
    "href": "unit-4/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-1/page-5.html",
    "href": "unit-4/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/lab-2/page-1.html",
    "href": "unit-4/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-2/page-2.html",
    "href": "unit-4/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-2/page-3.html",
    "href": "unit-4/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-2/page-4.html",
    "href": "unit-4/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-2/page-5.html",
    "href": "unit-4/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/lab-3/page-1.html",
    "href": "unit-4/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-3/page-2.html",
    "href": "unit-4/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-3/page-3.html",
    "href": "unit-4/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-3/page-4.html",
    "href": "unit-4/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-3/page-5.html",
    "href": "unit-4/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/lab-4/page-1.html",
    "href": "unit-4/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-4/page-2.html",
    "href": "unit-4/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-4/page-3.html",
    "href": "unit-4/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-4/page-4.html",
    "href": "unit-4/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-4/page-5.html",
    "href": "unit-4/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/lab-5/page-1.html",
    "href": "unit-4/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-5/page-2.html",
    "href": "unit-4/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-5/page-3.html",
    "href": "unit-4/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-5/page-4.html",
    "href": "unit-4/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-5/page-5.html",
    "href": "unit-4/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/optional-projects/page-1.html",
    "href": "unit-4/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/optional-projects/page-2.html",
    "href": "unit-4/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/optional-projects/page-3.html",
    "href": "unit-4/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/optional-projects/page-4.html",
    "href": "unit-4/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/optional-projects/page-5.html",
    "href": "unit-4/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/index.html",
    "href": "unit-5/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-5/lab-1/page-1.html",
    "href": "unit-5/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-5/lab-1/page-1.html#creating-an-account",
    "href": "unit-5/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-5/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-5/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-1/page-2.html",
    "href": "unit-5/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-5/lab-1/page-2.html#making-a-character-move",
    "href": "unit-5/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-5/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-5/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-1/page-3.html",
    "href": "unit-5/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-5/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-5/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html",
    "href": "unit-5/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-5/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html#keeping-score",
    "href": "unit-5/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-5/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html#ending-the-game",
    "href": "unit-5/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-1/page-5.html",
    "href": "unit-5/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/lab-2/page-1.html",
    "href": "unit-5/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-2/page-2.html",
    "href": "unit-5/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-2/page-3.html",
    "href": "unit-5/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-2/page-4.html",
    "href": "unit-5/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-2/page-5.html",
    "href": "unit-5/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/lab-3/page-1.html",
    "href": "unit-5/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-3/page-2.html",
    "href": "unit-5/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-3/page-3.html",
    "href": "unit-5/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-3/page-4.html",
    "href": "unit-5/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-3/page-5.html",
    "href": "unit-5/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/lab-4/page-1.html",
    "href": "unit-5/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-4/page-2.html",
    "href": "unit-5/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-4/page-3.html",
    "href": "unit-5/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-4/page-4.html",
    "href": "unit-5/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-4/page-5.html",
    "href": "unit-5/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/lab-5/page-1.html",
    "href": "unit-5/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-5/page-2.html",
    "href": "unit-5/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-5/page-3.html",
    "href": "unit-5/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-5/page-4.html",
    "href": "unit-5/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-5/page-5.html",
    "href": "unit-5/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/optional-projects/page-1.html",
    "href": "unit-5/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/optional-projects/page-2.html",
    "href": "unit-5/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/optional-projects/page-3.html",
    "href": "unit-5/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/optional-projects/page-4.html",
    "href": "unit-5/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/optional-projects/page-5.html",
    "href": "unit-5/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-6/index.html",
    "href": "unit-6/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "How Computers Work\nIn this unit, we’ll break down on the functionality of computers: what we know about them as we use them, the components of computers that let us use them, and what makes the components of computers work."
  },
  {
    "objectID": "unit-6/lab-1/page-1.html",
    "href": "unit-6/lab-1/page-1.html",
    "title": "Abstraction Inside the Computer",
    "section": "",
    "text": "Why this? AP talks about the abstraction hierarchy. This page shows some level of detail, but also highlights the two crucial abstraction barriers: between hardware and software, and between the analog domain and the digital domain.\n\n\nWhy here? This page is sort of preview of coming attractions. It’s a short page, with nothing really to do except read it and move on to the full story.\n\n\nPG, on unit: This whole unit is a lot of reading and very little action. Of course, that’s true of most school courses so, for better or for worse, kids are used to it. We’ve thought about it and (currently) have no solution. I very much like all the content. I equally much want the entire unit to be optional extra. To me, it feels like the second course in computer science, not the attract-students-in course. For those who want to see what’s under the hood of the /computer/—the computer engineering interest—this should be available, but if it were not for CB, I’d leave it all optional.\n\n\nBH, on lab: There’s hardly anything to do in this lab, and if we could improve on that it’d be great, but I don’t see how.\n\n\nMF: lightly clean up to make the text more concise\n\n\n\nIn Unit 4 A Hierarchy of Open Protocols, you saw that the Internet software is arranged in several levels of abstraction, with application programs (like your email program) at the highest level and network hardware protocols such as WiFi and Ethernet at the lowest level. Recall that higher levels are closer to what users want to be thinking about; lower levels are closer to the way machines work.\n\n\nLike the Internet, the way a computer works on the inside also has levels of abstraction.\n\n\n\nIn this lab, you will learn about the levels of abstraction in computer software and hardware.\n\n\nOn this page, you will learn get an overview of three groups (domains) of levels of abstraction.\n\n\n\nThere are a lot of levels of abstraction in how computers work. Here they are organized into three overarching domains:\n\n\n\nDifferent people might draw this diagram slightly differently, so don’t try to memorize all the levels. The key abstraction levels to remember are software, digital computer hardware, and underlying analog circuit components.\n\n\nDo we need this commented out content? –MF, 6/12/20\n\n\n\n\nSoftware Domain\n\n\nThe programs you write and use are software, but underneath these programs is more software that helps them work. In this lab, we’ll look at four layers of abstraction in the software domain:\n\n\napplications that you write and use\n\n\nprogramming languages that are used to write them\n\n\nlibraries of useful functions that hide messy details\n\n\noperating systems that interface with the hardware\n\n\n\n\nSoftware is an abstraction—a way of thinking about the computer without thinking about how it works.\n\n\nSimilarly, an automobile driver is operating at a high level of abstraction when using the brake pedal. As long as the engineers and mechanics designed and built the car right, drivers don’t need to know the details about how the brake system works—they just use it at a high level.\n\n\n\n\nImage by Wikipedia user Julianprescott2604juuly\n\n\n\nDigital Domain\n\n\nIn the software domain, each level of abstraction is a different piece of software, but the levels of abstraction in the digital domain are different ways of thinking about the same physical object. The circuitry inside a computer is complicated, and to make building it possible, engineers think about it at several different levels of abstraction:\n\n\nThe architecture is the instructions that software can send that the hardware will understand.\n\n\nThe computer has components (such as memory, processors, video cards, etc.) that implement the architecture.\n\n\nThose components are built out of integrated circuits (chips), which are the black rectangles that you can see on this circuit board.\n\n\nThose integrated circuits are designed around logic gates, the fundamental building blocks that implement Boolean functions.\n\n\nYou learned about Boolean functions in Unit 2 Lab 3: Making Decisions by Using Predicates.   \n\n\n\n\nDo we need this commented out content? –MF, 6/12/20\n\n\n\nAnalog Domain\n\n\nLogic gates, which are the lowest abstraction level of the digital domain, operate on ones and zeros. In physical reality, those logic gates are built out of transistors, a type of circuit component. Transistors aren’t like light switches that are either on or off. There can be in-between values (like “only 23% on”). So, electrical engineers have to think about the laws of electronics to design digital circuits so that in-between values don’t happen.\n\n\n: analog vs. digital\n\nDigital and analog are opposites. Digital means information that is represented as ones and zeros. Analog means information that is represented by signals that vary continuously (that is, including in-between values)."
  },
  {
    "objectID": "unit-6/lab-1/page-10.html",
    "href": "unit-6/lab-1/page-10.html",
    "title": "The Analog Domain: Transistors",
    "section": "",
    "text": "MF: lightly clean up to cut down on the boxes\n\n\n\nOn this page, you’ll learn about the transistors that implement logic gates.\n\n\n\nThe transistor is the fundamental building block of electronic circuits, where they are used as on/off switches.\n\n Image by sv.Wikipedia user DaRy \n\n\nYou’ve learned that a wire can either have a voltage or not have a voltage on it. The reality is more complicated. The on-or-off picture of a wire, a transistor, or a logic gate output is a simplification—an abstraction.\n\n\n\nThis is a rough graph of the actual input-output behavior of a transistor. Don’t worry about the details; just notice the two blue flat parts of the graph.  Within the “cutoff” region, small changes to the input voltage do not change the output voltage at all; the output is always zero volts. Likewise within the “saturation” region, small input changes hardly impact output voltage; the output is interpreted as a one. This is how transistors are used as switches in a computer.\n\n\nTransistors are versatile devices. When used in the middle, linear (pink) part of the graph, they’re amplifiers; a small variation in input voltage produces a large variation in output voltage. That’s how they’re used to play music in a stereo.\n\n\n\nWhy are they called “cutoff,” “linear,” and “saturation”?\n\nThe lower region of the curve is called “cutoff” because the transistor’s output is cut off (the output is zero) for any input in that region. The upper region is called “saturation” because, like a sponge that can’t get any wetter, the transistor can’t give more output no matter how big the input. The central region is called “linear” because it behaves like a linear (straight) function.\n\n\n\nThe transistor was invented in 1947 by John Bardeen, Walter Brattain, and William Shockley at Bell Laboratories, also the home of Unix. The inventors were awarded the 1956 Nobel Prize in Physics for this work.\n\n\nThe digital domain is not a law of nature; circuit designers have to work at ensuring that each wire in a circuit is always either fully on or fully off. The digital domain is an abstraction.\n\n\nLearn more about what’s below the digital abstraction and how it’s applied.\n\n\nThe flatness of the output at the two extremes is important because there will be small changes in the input. Electrical circuits have “noise,” undesired changes in voltages, for reasons from the transistors getting hot to loose connections on the circuit board to cosmic rays. This is why computers use zeros and ones: a transistor has two flat regions in its input-output curve.\n\n\nBut the flatness of the saturated region is only approximate, and it depends on how the transistor is connected to the rest of the circuit. One example of a potential problem is fanout, the number of transistor inputs to which one transistor’s output is connected. Beyond a certain number (it depends on the particular transistor type, but certainly ten inputs would be too many), the output voltage is reduced to the point that those inputs might not be sure whether they’re getting a zero or a one.\n\n\nThe way a transistor really works depends on quantum physics. (We’re not talking about quantum computers; plain old computer circuits are based on quantum effects also.) To learn more about analog-domain circuit design and what’s inside a transistor, take an Electrical Engineering course.\n\n\n\n\n\n\n\nResearch how transistors are used to implement logic gates."
  },
  {
    "objectID": "unit-6/lab-1/page-2.html",
    "href": "unit-6/lab-1/page-2.html",
    "title": "The Software Domain: Applications",
    "section": "",
    "text": "Significant changes in new framework: Most of 6.1.2 (the descriptions of categories of software and how creative you can be with them) can go. (from Brian)\n\n\nMF: lightly clean up to make the text more concise\n\n\n\nOn this page, you’ll explore some of the many purposes for which people use software applications.\n\n\nApplication programs (or “apps” for short) are the programs that users interact with. Here are some uses of such software that you may be familiar with:\n\n\nCommunication. You use a browser to view web pages on the World Wide Web. You keep in touch with friends using social networking, email, text messages, and chat applications that can be text-based, audio-based, or video-based. You can also tell the world what you think in a blog (short for weblog) or a vlog (short for video blog).\n\n\nAudio. Your computer or phone almost certainly has an application to play music—either from your own collection or from an Internet radio server. You can also use software to create music by using synthesizers that make new sounds, sampling (reusing) existing sounds, and recording sounds around you. For example, instead of being limited to someone else’s music selections on the radio, apps like Pandora create an individualized radio station just for you.\n\n\nPictures. You likely have a photo viewing application on your own computer or phone. You can also use software to manipulate pictures to create artwork, sharpen the focus, or create “fake news” by combining unrelated images. For example, when you get x-rays, the results are emailed to the doctor right away instead of having to wait for the images to be developed.\n\n\nIt would be great to have a funny picture here—maybe Obama shaking hands with an alien or something obviously fake like this (but not as creepy)… –MF, 11/13/17 Brian wants it to not be political (maybe a rock star or something). I agree. –MF, 12/8/17 \n\n\nVideo. You can use streaming video services to watch movies online, or you can create your own. You can shoot movies on your phone, edit them by combining video from different sources,  and upload them to the Internet or burn them onto a DVD to share them with your friends. Professional movie-making uses computer animation to create special effects like space aliens, armies of soldiers, and super heroes jumping over buildings.\n\n\nYour programs. The projects you’ve been creating in Snap! are apps too!\n\n\n\n\nThere are other kinds of software that aren’t for personal use but are used in industry and universities. Software applications are written to guide rockets, to analyze the results of experiments, and to design buildings and cars. Software is even written to write software.\n\n\nThe amount of information available on the Internet is huge. Computers can learn to combine information from different sources, to produce surprising results. This is called data mining. For example, businesses can combine location information from your phone with similar information from other phones to find traffic jams or popular restaurants. Or they can combine multiple sources of online information about you to send you targeted advertising for products you’re likely to want or to keep track of your political views for voter registration drives.\n\n\nComputers can be taught to generalize from the information they find to patterns they can use to predict the future. This is called machine learning. For example, scientists teach computers to explore telescope observations to learn new things about how the physical universe works.\n\n\nYou can use spreadsheets to manage your budget or to make charts and tables. Spreadsheets are a computer implementation of what was previously a pencil-and-paper process; they are the application that made businesses take personal computers seriously.\n\n\n\n\nAs new kinds of hardware are invented, new kinds of software become important. For example, the invention of the smartphone, which is always with its owner, has enabled applications such as song identification: you hear a song you like that you haven’t heard before so you hold your phone up, and it samples the sound and finds it in a song database. Because our phones are almost always on, they can collect information about where you are. This can be desirable when you look for friends who have agreed to share location information with you, but it also may allow your employer to find out that you took part in a political demonstration for or against civil rights.\n\n\n\n\nList three programs for each of the following categories:\n\n\nCommunication\n\n\nAudio\n\n\nPictures\n\n\nVideo\n\n\nYour Snap! projects\n\n\n\n\n\n\n\n\nWhich popular composers use sampling for their songs?\n\n\nWhat is autotune and which popular artists use it?\n\n\nWhat kinds of photo processing can you do with software? What kinds have you done?"
  },
  {
    "objectID": "unit-6/lab-1/page-3.html",
    "href": "unit-6/lab-1/page-3.html",
    "title": "The Software Domain: Programming Languages",
    "section": "",
    "text": "KEEP SUCH THAT needs to be fixed. –MF, 6/22/20\n\n\n\nThis page is getting long. After we finish going through the standards, we should consider how much of this is really needed. –MF, 1/29/19\n\n\nAlso, is this a page where we might want to make any of the “not a baby language” argument? –MF, 1/29/19\n\n\nMF: lightly clean up to make the text more concise\n\n\n\nOn this page, you will consider why there are different programming languages and look at some of the ways that languages differ.\n\n\nJavaScript, Python, Snap!, C++, Java, Scheme, Prolog… Why are there so many programming languages? Why don’t we just pick the best one, or design a new best one, and stick with that?\n\n\nSome languages have very narrow purposes; these are called special-purpose languages. For example, Microsoft Word has a programming language built into it called “Word macros” that’s just for generating data and formatting in a document. Likewise, HTML (Hypertext Markup Language) is just for structuring web pages.\n\n\nGeneral-purpose languages don’t have a narrow purpose in mind. In a sense, these languages are all the same: if an algorithm can be expressed in one language, it can be expressed in all of them. Several basic features are included in nearly all languages including arithmetic operators (+, -, ×, ÷) and Boolean operators (and, or, not). The differences among languages are mostly about levels of abstraction.\n\n\nHigh-Level and Low-Level Languages\n\n\n\nA high-level language (like Snap! or Scheme) includes many built-in abstractions that make it easier to focus on the problem you want to solve rather than on how computer hardware works. A low-level language (like C) has fewer abstractions, requiring you to know a lot about your computer’s architecture to write a program.\n\n\nWhy do programmers use high-level languages?\n\n\nHigh-level languages can produce safer programs—ones that are less likely to have bugs—because the abstractions manage messy details that can trip up programmers.\n\n\n\nHigh-level languages reduce bugs in memory use. Older, low-level languages required the programmer to manage the use of the computer’s memory with instructions saying “get me a block of memory big enough to hold 100 numbers” and other instructions saying “okay, I’m finished using this block of memory; it can be allocated for some other purpose.”\n\n\nThis is a nuisance to have to think about, and human programmers are bad at it. In low level languages, a very common bug is for one part of a program to say “I’m done with this block of memory” while another part of the program is still using it. High-level languages take care of this for us by using a technique called garbage collection that puts the computer in charge of knowing when a block of memory is no longer in use.\n\n\n\nHigh-level languages can also make programming much more convenient because they offer more abstractions. One example is higher-order functions (like map, keep, combine, and for each), which allow the programmer to write shorter, cleaner code.\n\n\n\n\n\n\n\nThis code is similar to a higher-order procedure that you have learned.  Identify the procedure that this code imitates: \n\n\n\nYou learned about for each in Unit 2 Lab 2: Checking Each Quiz Answer.\n\n\nYou learned about keep in Unit 2 Lab 3: Keeping Items from a List.\n\n\nYou learned about map in Unit 3 Lab 2: Transforming Every List Item.\n\n\nYou learned about combine in Unit 2 Lab 4: Other Mathematical Reporters.\n\n\n\n\n\n\n\n\n\nDoes the original script report a list of words or does it report each word separately? Which would this do?\n\n\n\n\n\n\n\nKeep takes a predicate (a question) as input and reports a list of the items that make that predicate true.\n\n\n\n\n\n\n\nCorrect!\n\n\n\n\n\n\n\nCombine takes a predicate with two blanks (like  or ) as input and reports the result of combining all the list items using that function (for example, adding them all together or joining them all into one text string).\n\n\n\n\n\n\n\n\n\n\n\n\nIn C, you can do this the long way:  but C doesn’t let you take an expression (like  or ) and stick it into a higher-order function like map: \n\n\nWhy do programmers use low-level languages?\n\n\nThe best reason to use low-level languages is to write operating systems (like Windows, Mac OS X, Android, or iOS). You’ll learn more about Operating systems on the The Software Domain: Operating Systems page.\n\n\nWhy else would a programmer use a low-level language?\n\n\nI still think this is too long and needs wordsmithing the next time around. –MF, 11/16/17\n\n\nApplication programmers don’t often decide “I’m going to write this program in a low level language.” They may simply not realize that higher levels of abstraction are possible. For example, a computer’s hardware limits the size of numbers that its arithmetic unit can add in a single step. Four billion—about ten digits—is a common size limit for integers. Programmers who use Java, JavaScript, Python, C or C++ may think that this limit is unavoidable. But programmers who use really high level languages, such as Scheme or Common Lisp, know that they can do arithmetic on numbers with millions or billions of digits, limited only by the size of the computer’s memory. As you will see later, Snap! has a library that lets it do this, too.\n\n\nPeople often say that different programming languages are good for different kinds of programs, but except for 3-D video processing (next paragraph), it’s hard to imagine an application that would be harmed by things like garbage collection or higher-order functions. There are just a few cases in which people deliberately design languages with features that might not be wanted for some applications. Here’s one such example: In Snap!, a text string of only digits is considered to be a number; you can do arithmetic on it. In a language for learners, requiring explicit conversion between data types just makes it harder to get started programming. But most languages that aren’t meant for beginners keep the two data types separate.\n\n\nProgrammers may think that abstraction is too slow. This used to be true, and programmers of 3-D video games still need all the speed they can get because their programs strain the speed of modern computers. So they often write part of their programs, the part that actually puts pictures on the screen, in machine language, just for speed. But most programmers write applications that don’t strain computers at all. When you send an email or text message, the limiting factor is how fast you can type, not how fast your computer can run programs.\n\n\nFrom Michael: Somewhere the was a comment about the speed of abstraction. IMO, we shouldn’t have this in the curriculum – but probably in the teachers guide. “Abstraction slows things down” is an argument students won’t hear if they’re just learning CS from BJC. By trying to address the argument before it happens, we just introduced to students who I think would have no reason to believe otherwise.\n\n\nBrian thinks that Michael would not have this concern if the link was still, “There are also less-good reasons.” However, Mary and Paul find that text problematic. Brian and Mary agreed to record and ignore this issue for now. –MF, 11/21/17\n\n\n\n\nLegacy code. Programmers in industry hardly ever get to write a program from the beginning. Much more often, they’re maintaining a program that somebody wrote years ago, and that person might not even work for that company anymore. In the long run, it might be better to rewrite the program in a more modern language, but in the short run, there’s no time to do that so they end up modifying the existing code in the existing programming language.\n\n\n\n\nWhat is machine language?\n\n\nBoth high- and low-level languages are used by people to write computer programs. Computer hardware understands a sort of ultra-low-level language, called machine language. Special programs called compilers and interpreters are used to translate human programming languages into machine language to be run by the computer.\n\n\nRead more about compilers and interpreters.\n\n\nA compiler is a program that takes a high- or low-level language program (the source code) as input and produces a machine language program (the object code) as its output. Once produced, the machine language program can be run repeatedly without needing to be compiled again.\n\n\nAn interpreter is a program that takes a high- or low-level program as input and carries out machine language instructions as needed to run the program. It does not produce a stand-alone machine language program as output and will have to repeat the process again next time.\n\n\nDoes that mean compilers are better?\n\n\nIt would mean that, except that the process of writing a program includes debugging. During the debugging, an interpreter can help by providing information about the progress of the program, like the visual stepping feature in Snap!, and allowing small changes in the source program without having to run a compiler repeatedly. For example, in Snap! you can drag a block into a script while it’s running, and a compiler couldn’t allow that.\n\n\nFor professional programmers, the best arrangement is to have both an interpreter and a compiler for the same language. The programmer writes and debugs the program using an interpreter, and once they’re sure it works, they compile it. Then, the compiler can run slowly, putting a lot of effort into optimizing the machine language code, so they get the fastest possible compiled program.\n\n\n\n\n\n\n\n\nThese questions are similar to those you will see on the AP CSP exam. \n\n\nWhich of the following statements are correct about a low-level programming language compared with a high-level programming language?\n\n\nLow-level language programs are generally harder for people to understand than programs written in a high-level language.\n\n\nA low-level language provides programmers with more abstractions than a high-level language.\n\n\nLow-level language programs are generally harder to debug than programs written in a high-level language.\n\n\n\n\n\nI only.\n\n\nI is true but is it the only true statement?\n\n\n\n\nI and III only.\n\n\nCorrect. Both statements are correct and opposite of II is true as high-level languages are more expressive and able in creating abstractions.\n\n\n\n\nII and III only.\n\n\nOpposite of II is true as high-level languages are more expressive and able in creating abstractions.\n\n\n\n\nI, II, and III.\n\n\nOpposite of II is true as high-level languages are more expressive and able in creating abstractions.\n\n\n\n\n\n\n\n\n\n\n\nA program is written in a high-level programming language. Identify the correct statement about the program?\n\n\n\nThe program can also be written in machine language using binary code, but then it will be less easily understood by people.\n\n\nCorrect. Binary code is very hard to read for humans.\n\n\n\n\nThe program can also be written in machine language using binary code, which will decrease the possibility of mistakes.\n\n\nMistakes will likely increase as it is harder for humans to make sense of binary code.\n\n\n\n\nThe program cannot be written in binary code as only data can be represented by using binary notation.\n\n\nEntire program can be converted to binary code. Such a code is actually the only code a machine can understand.\n\n\n\n\nSimple parts of the program can be written in binary code, but control elements such as conditionals, loops must be expressed in a high-level programming language.\n\n\nEntire program can be converted to binary code. Such a code is actually the only code a machine can understand.\n\n\n\n\n\n\n\n\n\n\n\n\nCode Readability\n\n\nOne of the features that Snap! gives you is that you can put title text in the middle of a block.\n\nYou built polygon in Unit 1: Graphics and Art.\n\n Compared to some other languages where the function has one name at the beginning and then all the inputs, this increases clarity and readability of your function.\n\npolygon(30, 15)\n\n\n\nAlso, in a text-based language, when you see something like 3 × 5 + 4, you need to have memorized that multiplication comes before addition (so the answer is 19). If you want it the other way, you have to use parentheses: 3 × (5 + 4) to get 27. In a blocks-based language, the blocks show you what was intended: . You’ve learned order of operations for +, –, ×, and ÷ in math class, but you probably haven’t learned order of operations for an expression like this:\nx && y << z\n. How you know which comes first\n&&\nor\n<<\n?\n\n\nHow do you know?\n\n\nSee for example, C Operator Precedence.\n\n\n\n\nParallelism\n\n\n5.2.1H A process may execute on one or several CPUs.\n\n\nOne reason to create new programming languages is to make it easier to write parallel programs—programs that can use more than one processor at the same time. Today in 2017, computers and smartphones have multicore processor chips that may include 2, 4, or 8 processors all running code at the same time. (The number of processors will increase even further over time.) Big companies such as Google use parallelism even more; they have clusters of thousands of computers, all working on the same program.\n\n\n4.1.2D Different languages are better suited for expressing different algorithms.4.1.2E Some programming languages are designed for specific domains and are better for expressing algorithms in those domains.\n\n\nFunctional programming languages (languages in which programmers never change the value of a variable) are particularly well suited to parallelism because there’s no danger of one processor changing the value of a variable that another processor is using. We’ve introduced you to functional programming techniques wherever possible throughout this course, including writing reporters and using higher-order functions (map, keep, and combine).\n\n\nSnap! isn’t a functional programming language, but it would be if the Snap! developers removed just a few procedures, including set (instead, you’d use input variables of recursive functions) and these four list commands: add, delete, insert, and replace (instead, you’d use in front of, item 1 of, and all but first of to report a new list with different values instead of changing the old list)."
  },
  {
    "objectID": "unit-6/lab-1/page-4.html",
    "href": "unit-6/lab-1/page-4.html",
    "title": "The Software Domain: Libraries",
    "section": "",
    "text": "On this page, you’ll learn that a library is a package of procedures written by other programmers that helps solve a problem.\n\n\nSuppose a programmer wants a picture to move around on a screen that also has other pictures on it. In Snap!, that’s built in: import a picture as a sprite costume, and then move it by moving the sprite. The sprite abstraction lets a programmer move a picture over other pictures without thinking about what happens where the images overlap or how to get back parts of the image after they are covered up. Not all languages have the sprite abstraction.\n\n\nOther common tasks (such as knowing where the mouse pointer is, doing arithmetic on huge numbers, or managing sound) also have complex parts. If programmers had to deal with all of these details in every program, no software would ever get developed. And because many applications need the same abilities, programmers write libraries for other programmers to use.\n\n\n: Software Libraries\n\nAAP-3.D.1, AAP-3.D.2, AAP-3.D.3\n\n\n\nA software library is a package of procedures that you can import into your program. A library is a kind of abstraction: you don’t have to know any of the details of how it’s coded. You can build libraries yourself, or you can use one that someone else wrote.\n\n\n\n\n\n\nLanguages vs. Libraries\n\n\nOften when people compare what different programming languages can do, they are really comparing libraries. For example, people may think they like JavaScript because they can use it to program web pages, but that’s not a property of JavaScript. It’s actually a web page library built into the browser that lets you program web pages.\n\n\nLibraries in Snap!\n\n\n\nDo we need all this commented out text? –MF, 6/12/20\n\n\nYou’ve used libraries in Snap!. For example, you used the “Bar Charts” library in Unit 5 Lab 3 Page 4: Analyzing Data.\n\n\n\nAAP-3.D\n\n\n\nRead through the libraries listed in Snap! (as shown above), and choose one block that interests you and that you have never used. Build a small project that uses that block, and use your project to teach that block to some of your classmates."
  },
  {
    "objectID": "unit-6/lab-1/page-5.html",
    "href": "unit-6/lab-1/page-5.html",
    "title": "The Software Domain: Operating Systems",
    "section": "",
    "text": "On this page, you’ll learn about the software that directly manages the computer’s hardware, the operating system.\n\n\nYour computer came with an operating system (OS) installed. Operating systems are the underlying programs that your apps interact with to communicate with the computer. For computers with keyboards, it’s probably Linux, macOS, or Windows. For phones and tablets, it’s probably Android or iOS.\n\n\nRoughly speaking, the operating system handles the basic tasks that your applications depend on, including:\n\n\nthe window system, which allows more than one window to be open on your screen\n\n\nthe file manager, that displays the contents of folders and lets you select files to read or manipulate\n\n\ncommunications with external devices like your keyboard or printer\n\n\nutilities such as a simple text editor or a calculator\n\n\n\n\nIn a computer, there are many applications and operating system tasks all wanting to run at once. Every operating system has a kernel that manages when all these processes run.\n\n\n\nThe Kernel\n\n\nThe kernel deals directly with hardware (keyboard, mouse, microphone, camera, hard drives, memory, printer, speakers, screen, etc.). So the kernel is generally written in a low level language so it can control that hardware. It handles several important tasks:\n\n\nScheduling. The kernel has access to the time clock that’s built into the hardware and lets each program run for a small amount of time (typically about 1/10 second) and then switches to the next program in line.\n\n\nSecurity. Those many application programs may have bugs or malicious code. The kernel, which has access to the memory where programs and data are stored, ensures that each program is assigned a separate location in memory and doesn’t interfere with other programs. The kernel also controls which data files a program can use based on file protection settings that users or applications specify for each file.\n\n\nInput and output. Many devices can be attached to your computer. The kernel knows how the computer’s hardware reads or writes to each device. Only the kernel is allowed direct access to these devices, and it carries out authorized transfers of information for the applications.\n\n\n\n\nThese days, OS kernels are remarkably similar. Of the five systems listed earlier (Linux, macOS, Windows, Android, and iOS), four of them (all but Windows) are based on variants of a single kernel, called Unix.\n\n\nRead more about Unix.\n\n\n\nThis still needs editing. If we find a way to cut this back, more students will actually read it. –MF, 11/8/17\n\n\n(“Unix” is a trademark, currently owned by The Open Group, and not all of the variants discussed here are authorized to use that name, but they all provide essentially the same program interface.) Unix was created around 1970 by Ken Thompson and Dennis Ritchie at AT&T Bell Laboratories.\n\n\nPrior to Unix, almost everyone thought that an operating system had to be developed for a particular computer architecture, and had to be written in the machine language of that computer, the very low-level instructions that the hardware understands directly. The first version of Unix was also written in the machine language of a particular computer, the Digital Equipment Corporation PDP-7. But the Unix developers knew that the PDP-7 wasn’t the only computer in the world, and better ones would come along, so they wanted to make Unix portable, meaning that it could be brought to a new computer architecture without a complete rewrite. So in 1972 Dennis Ritchie invented the C programming language for that purpose. C is similar to other languages available at the time, but with one added feature: a C programmer can read or write any individual byte of the program’s memory by knowing its address, a number that distinguishes it from other bytes. (You can see that this feature is quite the opposite from high level abstraction. It is useful only to a programmer who’s thinking in detail about what’s where in the computer’s memory.) Unix was then rewritten in C.\n\n\nBecause of its portability, Unix spread quickly to many computer architectures. Researchers at Berkeley developed a version, based on the AT&T version, with virtual memory, the ability to run a program that’s only partly in the computer’s main memory, with the rest kept on a disk. This Berkeley version is an ancestor of Apple’s operating systems, macOS (since macOS 10.0) and iOS. (An Apple computer doesn’t behave anything like a Unix computer, but the differences are almost all in application-level programs, not in the kernel.) Android, Google’s operating system for cell phones and tablets, is based on Linux, a complete rewrite of Unix originally written by Linus Torvalds, who was, at the time, a computer science student in Finland.\n\n\nThe application-level programs that were part of the original Unix package have, in most systems, been replaced with rewritten programs from the Free Software Foundation’s GNU (an acronym for Gnu’s Not Unix) package.\n\n\n\n\n\n\nExplore the programs running on your computer right now.\n\n\nFind out how to list all the programs that are running right now on your computer, and collect such a program list in a text file.\n\n\nCount how many of them are programs you asked the computer to run.\n\n\nOf the rest, can you figure out from the names what they do?\n\n\nWhich ones are part of the operating system (not the OS kernel)?\n\n\nSee if you can figure out the purpose of some oddly-named ones by doing a web search."
  },
  {
    "objectID": "unit-6/lab-1/page-6.html",
    "href": "unit-6/lab-1/page-6.html",
    "title": "The Digital Domain: Architecture",
    "section": "",
    "text": "MF: lightly clean up to make the text more concise\n\n\n\nOn this page, we shift from software to hardware, starting with the architecture, which is essentially the hardware as it looks to the software.\n\n\nThe software in a computer would be useless without the computer’s hardware: the actual circuitry inside the box. Just as there are layers of abstraction for software, hardware designers also think in layers of abstraction.\n\n\n\nEveryone talks about computers representing all data using only two values, 0 and 1. But that’s not really how electronic circuits work. Computer designers can work as if circuits were either off (0) or on (1) because of the digital abstraction, the most important abstraction in hardware. Above that level of abstraction, there are four more detailed levels, called the digital domain. Below the digital abstraction, designers work in the analog domain, in which a wire in a circuit can have any voltage value, not just two values.\n\n\nOn the next four pages, we’ll explore four levels of the digital domain.\n\n\n\nThe Stored Program Computer\n\n\nAs you’ll see in Lab 2, there have been machines to carry out computations for thousands of years. But the modern, programmable computer had its roots in the work of Charles Babbage in the early 1800s.\n\n\nBabbage was mainly a mathematician, but he contributed to fields as varied as astronomy and economics. Babbage lived about 150 years ago from 1791-1871. Electricity as a source of energy was unknown. The steam engine came into widespread use around the time he was born. The most precise machinery of his time was clockwork—gears.\n\n\nDifference Engine\n\n\nBabbage’s first computer was the Difference Engine. He used gears to design a complex machine that would compute and print tables of numbers (like the tables of log or trig functions you may have in the back of a math textbook). But these gears needed to be so precise that each one had to be handmade. The project became so expensive that the government stopped funding it, and Babbage never finished a full-scale version.\n\n\nBad Mary. ;) We need a CSS solution for this instead of using tables. –MF, 12/4/17\n\n\n\n\n\n\n\n\n |  | The Difference Engine at the London Science Museum  | A closeup showing the gears more clearly\nImage by Wikimedia user geni. Copyright 2008. License: GFDL, CC BY-SA. | Image by Carsten Ullrich. Copyright 2005. License: CC-BY-SA-2.5.\n\n\n\n\nLearn more about the history of the Difference Engine.\n\n\nIn Babbage’s time, such numerical tables were computed by hand by human mathematicians, and they were typeset by hand for printing. Both the computation and the copying into type were error-prone, and accurate tables were needed for purposes ranging from engineering to navigation.\n\n\nBabbage built a first, small Difference Engine in 1822. This first effort proved that a Difference Engine was possible, but it didn’t have the precision (number of digits in each number) to be practical. In 1823, the British government funded Babbage to build a larger version. Unfortunately, metalsmiths in his day could not produce very precise gears in large quantities; each one had to be handmade. So he spent ten times his approved budget by the time the government canceled the project in 1842.\n\n\nIn 1991, the London Science Museum completed a Difference Engine following Babbage’s original design using gears made by modern processes but at the level of precision that was available to Babbage. This proved that, in principle, Babbage could have completed a working machine, given enough time and money.\n\n\n\n\nThe Analytical Engine\n\n\nThe Difference Engine could be used to compute many different functions by manually setting the starting position of various gears. But it had only one algorithm: the one built into the hardware design. In 1833, Babbage began working on the Analytical Engine, which was based on the general idea of the Difference Engine but could carry out instructions in a primitive programming language prepared on punched cards.\n\nPunched cards used to program the Analytical Engine Karoly Lorentey. Copyright 2004. License: CC-BY.\n\n\n\n\nThese days, we are surrounded by programmable computers, and having software seems obvious now. But it wasn’t obvious, and before Babbage, all algorithms were implemented directly in hardware.\n\n\nSo, 150 years ago, Babbage created plans for what is essentially a modern computer, although he didn’t have electronics available. His underlying idea for hardware was entirely mechanical, but it turned out not to be possible for him to build it with then-current technology. We didn’t get usable computers until there was an underlying technology small enough, inexpensive enough, and fast enough to support the software abstraction. You’ll learn about this technology, transistors, soon.\n\n\nLearn more about the Analytical Engine.\n\n\nThe Analytical Engine, like modern computers, had an arithmetic processor (called the “mill”) and a separate memory (the “store”) that would hold 1,000 numbers, each with up to 40 digits.  The mill did arithmetic in decimal (with digits 0-9 equally spaced around each gear); using just “ones and zeros” in computing came later.\n\n\nThe programming language used in the Analytical Engine included conditionals and looping, which is all you need to represent any algorithm. (It could loop because it could move forward or backward through the punched cards containing the program.)\n\n\nAlas, Babbage could build only a small part of the Analytical Engine, which would have required even more metalworking than the Difference Engine. His notes about the design weren’t complete, and so nobody has ever built a working model, although there are simulations available on the Web (see the Take It Further problem below). Sadly, in the early days of electronic computers, Babbage’s work was not widely known, and people ended up reinventing many of his ideas.\n\n\n\n\nLearn about Ada, Countess Lovelace’s invention of symbolic computing.\n\n\nAlthough his design was very versatile, Babbage was mainly interested in printing tables of numbers. It was his collaborator Augusta Ada King-Noel, Countess of Lovelace, who first recognized that the numbers in Babbage’s computer could be used not only as quantities but also as representing musical notes, text characters, and so on.\n\n\n\nImage by Alfred Edward Chalon, Science & Society Picture Library, Public Domain, via Wikimedia.\n\n\nMuch of what we know today about Babbage’s design comes from Ada Lovelace’s extensive notes on his design. Her notes included the first published program for the Analytical Engine, and so she is widely considered “the first programmer,” although it’s almost certain that Babbage himself wrote several example programs while designing the machine.\n\n\nWhether or not she was truly the first programmer, historians agree that she did something more important: she invented the idea of symbolic computation (including text, pictures, music, etc.) as opposed to numeric computation. This insight paved the way for all the ways that computers are used today, from movies on demand to voice-interactive programs such as Siri and Alexa.\n\n\n\n\n\nThe abstraction of software (a program stored in the computer’s memory) is what makes a computer usable for more than one purpose.\n\n\nWhat’s an Architecture?\n\n\nThe Analytical Engine (described above) was the first programmable computer architecture. The processor in the computer you are using today understands only one language, its own machine language—not Java, not C, not Snap!, not Python, nor anything else. Programs written in those other languages must first be translated into machine language.\n\n\nThe most important part of the architecture is the machine language, the set of ultra-low-level instructions that the hardware understands. This language is like a contract between the hardware and the software: The hardware promises to understand a set of instructions, and the software compiles programs from human-friendly language into those instructions.\n\n\n\nMachine language is the lowest-level programming language; it is directly understood by the computer hardware.\n\n\nArchitecture is an abstraction, a specification of the machine language. It also tells how the processor connects to the memory. It doesn’t specify the circuitry; the same architecture can be built as circuitry in many different ways.\n\n\n\nOne important part of an architecture is the number of wires that connect the processor and memory. This is called the width of the architecture, measured in bits (number of wires). A wider computer can process more data in one instruction.\n\n\nWhat does machine language look like?\n\n\nConsider the Snap! instruction . In a lower-level language such as C or Java, the same idea would be written as:\nc = a+b;\nThat simple command might be translated into six machine language instructions (slightly simplified here):\nmovq    _c, %rcx\nmovq    _b, %rdx\nmovq    _a, %rsi\nmovl    (%rsi), %edi\naddl    (%rdx), %edi\nmovl    %edi, (%rcx)\nThis notation, called assembly language, is a line-by-line equivalent to the actual numeric instruction codes but is slightly more readable.\n\nWhat does that code mean?\n\n\nThe first three instructions load the addresses of the three variables into registers inside the processor. The names with percent signs, such as %rcx, refer to specific processor registers. Movq is the name of a machine language instruction. (It abbreviates “move quote,” which says to move a constant value into a register. Note that a is a variable, but the address of a is a constant value — the variable doesn’t move around in the computer’s memory.)\n\n\nThe next instruction, movl (“move long”), says to move a word from one place to another. Putting a register name in parentheses, like (%rsi), means to use the memory location whose address is in the register. In this case, since the third movq put the address of a into register %rsi, the first movl says to move the variable a from memory into a processor register. Then the addl instruction says to add the variable b into that same register. Finally, the value in register %edi is moved into the memory location containing variable c.\n\n\n\nYou wouldn’t want to have to program in this language! And you don’t have to; modern architectures are designed for compilers, not for human machine language programmers.\n\n\n\n\nLearn about:\n\n\nPC/Mac architecture\n\n\nThis has a lot of numbers in it which make it harder to read, but more importantly it’s so abstract and doesn’t really talk about anything familiar, which given the hint title “PC/Mac” I was expecting. Needs some work. –MF, 11/8/17\n\n\nMost computer processors (the part that carries out instructions) in desktop or laptop computers use an architecture called “x86” that was designed at Intel, a chip manufacturer. The first processor using that architecture was called the 8086, released in 1978. (The reason for the name x86 is that the first few improved versions were called 80286, 80486, and so on.) The original 8086 was a 16-bit architecture; since then 32-bit (since 1985) and 64-bit (since 2003) versions have been developed. Even with all the refinements of the architecture, the new x86 processors are almost always backward compatible, meaning that today’s versions will still run programs that were written for the original 8086.\n\n\nWhy did the x86 architecture come to rule the world? The short answer is that IBM used it in their original PC, and all the later PC manufacturers followed their lead because they could run IBM-compatible software unmodified. But why did IBM choose the x86? There were arguably better competing architectures available, such as the Motorola 68000 and IBM’s own 801. The PC designers argued about which to use, but in the end, what made the difference was IBM’s long history of working with Intel.\n\n\nThe Apple Macintosh originally used the Motorola 68000 architecture, and in 1994 Apple designed its own PowerPC architecture in a joint project with IBM and Motorola, but in 2006 they, too, switched to the x86, because Intel keeps producing newer, faster versions of the x86 more often than other companies could keep up.\n\n\n\n\nsmartphone architecture\n\n\nEverything about smartphone architecture is determined by the tiny size of the space inside the case. The height and width of the phone are constrained by the size of people’s front pockets. (Don’t keep your phone in your back pants pocket. That’s really bad both for the phone and for your back.) The front-to-back depth of a phone could be much bigger than it is, but for some reason phone manufacturers compete on the thinness of their phones, which gives designers even less room inside.\n\n\nAs a result, many components that would be separate from the processor chip in a computer are instead part of the same chip in a phone. These components may include some or all of a cellular modem, a WiFi modem, a graphics processor (another processor that specializes in parallel arithmetic on lists of numbers), memory, a GPS receiver to find your phone’s physical location, circuitry to manage the power depletion and recharging of the battery, and more. These days, the chip is likely to include two, four, or even eight copies of the actual CPU, to make multicore systems. This collection of components is called a system on a chip, or SoC.\n\n\nIntel made an x86-based (that is, the same architecture used in PCs) low-power SoC called the Atom, which was used in a few Motorola phones and some others made by companies you’ve never heard of. It was made to support Android, Linux, and Windows phones.\n\n\nBut the vast majority of phones use the ARM architecture, which (unlike the x86) was designed from the beginning to be a low-power architecture. The acronym stands for Advanced RISC Machine. It’s available in 32-bit and 64-bit configurations.\n\n\nWhat’s a RISC?\n\n\nThe name stands for Reduced Instruction Set Computer, as opposed to the CISC (Complex Instruction Set Computer) architectures, including the x86. The instruction set of an architecture is, as you’d guess from the name, the set of instructions that the processor understands. A RISC has fewer instructions than a CISC, but it’s simpler in other ways also. For example, a CISC typically has more addressing modes in its instructions. In the x86 architecture, the add instruction can add two processor registers, or a register and a value from the computer’s memory, or a constant value built into the instruction itself. A RISC architecture’s add instruction just knows how to add two registers (perhaps putting the result into a third register), and there are separate load and store instructions that copy values from memory to register or the other way around. Also, in a RISC architecture, all instructions are the same length (say, 32 bits) whereas in a CISC architecture, instruction lengths may vary. These differences matter because a RISC can be loading the next instruction before it’s finished with the previous instruction, and a RISC never has more than one memory data reference per instruction.\n\n\nSo why don’t they use a RISC architecture in PCs? At one time Apple used a RISC processor called the PowerPC in its Macintosh computers, but the vast majority of computers sold are PCs, not Macs, and as a result Intel spends vast sums of money on building faster and faster circuits implementing the x86 architecture. The moral is about the interaction between different levels of abstraction: A better architecture can be overcome by a better circuit design or better technology to cram components into an integrated circuit.\n\n\n\n\nThe company that designed the ARM, called ARM Holdings, doesn’t actually build processors. They license either the architecture design or an actual circuit design to other companies that integrate ARM processors into SoCs. Major companies that build ARM-based processor chips include Apple, Broadcom, Qualcomm, and Samsung. Smartphone manufacturers buy chips from one of these companies.\n\n\n\n\nembedded architecture and the “Internet of Things”\n\n\nYou can buy thermostats with computers in them, refrigerators with computers in them, fuzzy animal toys with computers in them—more and more things, as time goes on. Modern automobiles have several computers in them, largely for safety reasons; you wouldn’t want the brakes to fail because the DVD player has a problem. The goal, as described by researchers in computing, is “smart dust,” meaning that lots of computers could be floating around a building unnoticed. What good is an unnoticed computer? This is a classic dual use technology. The beneficial use everyone talks about is emergency response to disasters; it would be a great help to the fire department to know, from the outside, which rooms of a building have people in them. But another use for this technology would be spying.\n\n\n NXP Freescale SCM-i.MX6D chip\n\n\nFor embedded computing, the main design criteria are small size and low power consumption. The chip in the picture above is based on the ARM architecture, like most cell phones. That’s actually a big embedded-systems chip; the Kinetis KL02 MCU (micro controller unit) fits in a 2 millimeter square—less than 1/10 inch. That’s still too big to float in the air like dust, but imagine it in a sticky container and thrown onto the wall.\n\n\nSomeday, the spying will be even more effective (along with, we hope, treatment for diseases of the brain): ARM targets your brain with new implantable chips (Engadget, 5/17/2017).\n\n\nIntel made a button-sized x86-compatible chip in 2015, but announced in 2017 that it would be discontinued, leaving only ARM and PowerPC-based processors competing in this market.\n\n\n\n\nhobbyist computer architecture\n\n\nIn one sense, any architecture can be a hobbyist architecture. Even back in the days of million-dollar computers, there were software hobbyists who found ways to get into college computer labs, often by making themselves useful there. Today, there are much more powerful computers that are cheap enough that hobbyists are willing to take them apart. But there are a few computer architectures specifically intended for use by hobbyists.\n\n\nWe DO NOT yet have permissions for this image. –MF, 12/4/17\n\n\n\nBy far the most popular computer specifically for hobbyists is the Arduino. It’s a circuit board, not just a processor. Around the edges of the board are connectors. On the short edge on the left in the picture are the power input, which can connect to a power supply plugged into the wall or to a battery pack for a mobile device such as a robot, and a USB connector used mainly to download programs from a desktop or laptop computer. On the long edges are connectors for single wires connected to remote sensors (for light, heat, being near a wall, touching another object, etc.) or actuators (stepping motors, lights, buzzers, etc.).\n\n\nOne important aspect of the Arduino design is that it’s free (“free as in freedom”). Anyone can make and even sell copies of the Arduino. This is good because it keeps the price down (the basic Arduino Uno board costs $22) and encourages innovation, but it also means that there can be incompatible Arduino-like boards. (The name “Arduino” is a trademark that can be used only by license from Arduino AG.)\n\n\nThe processor in most Arduino models is an eight-bit RISC system with memory included in the chip, called the AVR, from a company called Atmel. It was designed by two (then) students in Norway, named Alf-Egil Bogen and Vegard Wollan. Although officially “AVR” doesn’t stand for anything, it is widely believed to come from “Alf and Vegard’s RISC.” There are various versions of the AVR processor, with different speeds, memory capacities, and of course prices; there are various Arduino models using the different processors.\n\n\nUnlike most (“von Neumann architecture”) computers, the AVR (“Harvard architecture”) separates program memory from data memory. (It actually has three kinds of memory, one for the running program, one for short-term data, and one for long-term data.) Babbage’s Analytical Engine was also designed with a program memory separate from its data memory.\n\n\nWhy would you want more than one kind of memory?\n\n\nThere are actually two different design issues at work in this architecture. One is all the way down in the analog domain, having to do with the kind of physical circuitry used. There are many memory technologies, varying in cost, speed, and volatility: volatile memory loses the information stored in it when the device is powered off, while non-volatile memory retains the information. Here’s how memory is used in the AVR chips:\n\n\nEEPROM (512 Bytes–4kBytes) is non-volatile, and is used for very long term data, like a file in a computer’s disk, except that there is only a tiny amount available. Programs on the Arduino have to ask explicitly to use this memory, with an EEPROM library.\n\n\nThe name stands for Electrically Erasable Programmable Read-Only Memory, which sounds like a contradiction in terms. In the early days of transistor-based computers, there were two kinds of memory, volatile (Random Access Memory, or RAM) and nonvolatile (Read-Only Memory, or ROM). The values stored in an early ROM had to be built in by the manufacturer of the memory chip, so it was expensive to have a new one made. Then came Programmable Read-Only Memory (PROM), which was read-only once installed in a computer, but could be programmed, once only, using a machine that was only somewhat expensive. Then came EPROM, Erasable PROM, which could be erased in its entirety by shining a bright ultraviolet light on it, and then reprogrammed like a PROM. Finally there was Electrically Erasable PROM, which could be erased while installed in a computer, so essentially equivalent to RAM, except that the erasing is much slower than rewriting a word of RAM, so you use it only for values that aren’t going to change often.\n\n\n\n\nSRAM (1k–4kBytes): This memory can lose its value when the machine is turned off; in other words, it’s volatile. It is used for temporary data, like the script variables in a Snap! script.\n\n\nThe name stands for Static Random Access Memory. The “Random Access” part differentiates it from the magnetic tape storage used on very old computers, in which it took a long time to get from one end of the tape to another, so it was only practical to write or read data in sequence. Today all computer memory is random access, and the name “RAM” really means “writable,” as opposed to read-only. The “Static” part of the name means that, even though the memory requires power to retain its value, it doesn’t require periodic refreshing as regular (“Dynamic”) computer main memory does. (“Refreshing” means that every so often, the computer has to read the value of each word of memory and rewrite the same value, or else it fades away. This is a good example of computer circuitry whose job is to maintain the digital abstraction, in which a value is zero or one, and there’s no such thing as “fading” or “in-between values.”) Static RAM is faster but more expensive than dynamic RAM; that’s why DRAM is used for the very large (several gigabytes) memories of desktop or laptop computers.\n\n\n\n\nFlash memory (16k–256kBytes): This is the main memory used for programs and data. Flash memory is probably familiar to you because it’s used for the USB sticks that function as portable external file storage. It’s technically a kind of EEPROM, but with a different physical implementation that makes it much cheaper (so there can be more of it in the Arduino), but more complicated to use, requiring special control circuitry to maintain the digital abstraction.\n\n\n“More complicated” means, for example, that changing a bit value from 1 to 0 is easy, but changing it from 0 to 1 is a much slower process that involves erasing a large block of memory to all 1 bits and then rewriting the values of the bits you didn’t want to change.\n\n\n\n\n\n\nSo, that’s why there are physically different kinds of memory in the AVR chips, but none of that completely explains the Harvard architecture, in which memory is divided into program and data, regardless of how long the data must survive. The main reason to have two different memory interface circuits is that it allows the processor to read a program instruction and a data value at the same time. This can in principle make the processor twice as fast, although that much speed gain isn’t found in practice.\n\n\nTo understand the benefit of simultaneous instruction and data reading, you have to understand that processors are often designed using an idea called pipelining. The standard metaphor is about doing your laundry, when you have more than one load. You wash the first load, while your dryer does nothing; then you wash the second load while drying the first load, and so on until the last load. Similarly, the processor in a computer includes circuitry to decode an instruction, and circuitry to do arithmetic. If the processor does one thing at a time, then at any moment either the instruction decoding circuitry or the arithmetic circuitry is doing nothing. But if you can read the next instruction at the same time as carrying out the previous one, all of the processor is kept busy.\n\n\nThis was a long explanation, but it’s still vastly oversimplified. For one thing, it’s possible to use pipelining in a von Neumann architecture also. And for another, a pure Harvard architecture wouldn’t allow a computer to load programs for itself to execute. So various compromises are used in practice.\n\n\n\n\nAtmel has since introduced a line of ARM-compatible 32-bit processors, and Arduino has boards using that processor but compatible with the layout of the connectors on the edges.\n\n\nOne thing that has contributed to the popularity of the Arduino with hobbyists is the availability of shields, which are auxiliary circuit boards that plug into the side edge connectors and have the same connectors on their top side. Shields add features to the system. Examples are motor control shields, Bluetooth shields for communicating with cell phones, RFID shields to read those product tags you find inside the packaging of many products, and so on. Both the Arduino company and others sell shields.\n\n\nStack of Arduino shields Image by Wikimedia user Marlon J. Manrique, CC-BY-SA 2.0.\n\n\n\nA completely different hobbyist architecture is the Raspberry Pi. It was designed to be used like a desktop or laptop computer, but with more access to its electronics. It uses an ARM-compatible processor, like most cell phones, but instead of running phone operating system software such as Android, it runs “real” computer operating systems. It ships with Linux, but people have run Windows on it.\n\n\nThe main thing that makes it exciting is that it’s inexpensive: different models range in price from $5 to $35. That price includes just the circuit board, as in the picture, without a keyboard, display, mouse, power adapter, or a case. The main expense in kit computers is the display, so the Pi is designed to plug into your TV. You can buy kits that include a minimal case, a keyboard, and other important add-ons for around $20. You can also buy fancy cases to make it look like any other computer, with a display, for hundreds of dollars.\n\n\nBecause the Pi is intended for educational use, it comes with software, some of which is free for anyone, but some of which generally costs money for non-Pi computers. One important example is Mathematica, which costs over $200 for students (their cheapest price), but is included free on the Pi.\n\n\nLike the Arduino, the Pi supports add-on circuit boards with things like sensors and wireless communication modules.\n\n\nRaspberry Pi board Image by Evan Amos, via Wikimedia, public domain\n\n\n\n\n\n\n\nLearn more about computer architecture in general.\n\n\nThis needs some heavy edits. For example, perhaps the whole third paragraph, “One recent 64-bit x86…” could be cut. –MF, 11/8/17\n\n\nThe memory hierarchy\n\n\nFor a given cost of circuit hardware, the bigger the memory, the slower it works. For this reason, computers don’t just have one big chunk of memory. There will be a small number of registers inside the processor itself, usually between 8 and 16 of them. The “size” (number of bits) of a data register is equal to the width of the architecture.\n\n\nThe computer’s main memory, these days, is measured in GB (gigabytes, or billions of bytes). A memory of that size can’t be fast enough to keep up with a modern processor. Luckily, computer programs generally have locality of reference, which means that if the program has just made use of a particular memory location, it’s probably going to use a nearby location next. So a complete program may be very big, but over the course of a second or so only a small part of it will be needed. Therefore, modern computers are designed with one or more cache memories—much smaller and therefore faster—between the processor and the main memory. The processor makes sure that the most recently used memory is copied into the cache.\n\n\nOne recent 64-bit x86 processor has a first level (L1) cache of 64KB (thousands of bytes) inside the processor chip, a larger but slower L2 cache of 256 KB, also inside the processor, and an L3 cache of up to 2 MB (megabytes, millions of bytes) outside the processor. Each level of cache has a copy of the most recently used parts of the next level outward: the L1 cache copies part of the L2 cache, which copies part of the L3 cache, which copies part of the main memory. Data in the L1 cache can be accessed by the processor about as fast as its internal registers, and each level outward is a little slower. Hardware in the processor handles all this complexity, so that programmers can write programs as if the processor were directly connected to the main memory.\n\n\nSecond sourcing\n\n\nIntel licenses other chip manufacturers to build processors that use the same architecture as Intel’s processors. Why do they do that? Wouldn’t they make more money if people had to buy from Intel? The reason is that computer manufacturers, such as Dell, Apple, and Lenovo, won’t build their systems around an architecture that is only available from one company. They’re not worried that Intel will go out of business; the worry is that there may be a larger-than-expected demand for a particular processor, and Intel may not be able to fill orders on time. But if that processor is also available from other companies such as AMD and Cyrix, then a delay at Intel won’t turn into a delay at Dell. Those other chip manufacturers may not use the same circuitry as the Intel version, as long as they behave the same at the architecture level.\n\n\n\n\n\n\nLearning enough about the Analytical Engine to be able to write even a simple program for it is quite a large undertaking. Don’t try it until after the AP exam, but if you are interested, there are extensive online resources available here:\n\n\nThe Analytical Engine Table of Contents\n\n\nWeb Analytical Engine Emulator"
  },
  {
    "objectID": "unit-6/lab-1/page-7.html",
    "href": "unit-6/lab-1/page-7.html",
    "title": "The Digital Domain: Components",
    "section": "",
    "text": "BH: I would scrap the part about external components, and focus on what’s important and on the AP exam: processor, memory, I/O.\n\n\n\nOn this page, you’ll explore the parts (components) of the computer hardware.\n\n\nFor as long as people have been teaching other people about computers, they always say “A computer consists of the processor, memory, and input/output (I/O) devices.”\n\n\nIn the early days of computers, it was easy to point out the huge racks of equipment that contained each of those three components:  \n\n\nThese are pictures of a powerful computer from the 1970s. Each of the big racks full of circuitry is about the size of a refrigerator. Today, a much more powerful computer—more speed, more memory—fits inside a cell phone.\n\n\nBecause today’s processors and memory are so small, most of what we see is the input/output (I/O) devices, like keyboard, mouse, screens. Input devices include the keyboard, mouse, and microphone. Output devices include the printer, speaker, and (for laptop or desktop computers) the display screen. On phones and tablets, touchscreens are used for both input and output. Disk drives, optical drives (for CDs and DVDs), and the Internet interface are also used for both.\n\n\n\n\n\nHover the mouse over the numbers to learn about each of the computer components. (Or download this Computer Components PDF.)\n\n\n\n\n\n\nScanner: An input device that can convert the contents of a paper document into a digital image that can be stored in the computer.\n\n\n\n\n\n\nCPU (Central Processing Unit) or the processor: The “brain” of the computer where programs are run. It is one of the most expensive parts of the hardware.  Modern CPUs can perform multiple tasks simultaneously.    Image credit: Wikipedia user Solipsist\n\n\n\n\n\n\nRAM (Random Access Memory): The computer’s high-speed, short-term memory. It temporarily stores data and instructions for programs that run on the computer.    Image credit: Wikipedia user Cyberdex\n\n\n\n\n\n\nExpansion cards: Circuit boards that can be inserted to add functionality to a computer system (for example: network, sound, or video cards).    Image credit: Wikipedia user Rackmount-guy\n\n\n\n\n\n\nPower supply: Converts electricity from the wall into the form that the other computer components use.\n\n\n\n\n\n\nOptical Drive: An input/output device that reads data from and writes data to CDs and DVDs.\n\n\n\n\n\n\nHard Drive: An input/output device that serves as the long-term storage memory of the computer. There are two primary kinds: mechanical drives that use a mechanical arm to read and write data on a rotating disk (shown below), and “solid state” drives that have no moving parts. .   Video credit: Wikipedia user Peter17\n\n\n\n\n\n\nMotherboard: A circuit board that holds and connects various components of the computer and allows their communication.   Image credit: Wikipedia user Julianprescott2604juuly.\n\n\n\n\n\n\nSpeaker: An input/output device that outputs sound from the computer.\n\n\n\n\n\n\nMonitor: An input/output device that displays information visually. Generally, monitors are output devices where the computer visually displays information. Touchscreens combine the functions of output and input. \n\n\n\n\n\n\nKeyboard: An input device on which the user can type to communicate with the computer.\n\n\n\n\n\n\nMouse: An input device that allows the user to interact with visual objects displayed on the monitor.\n\n\n\n\n\n\nExternal Hard Drive: An input/output device that serves as an extra hard drive used for additional or backup storage.\n\n\n\n\n\n\nPrinter: An output device that can transfer digital data onto paper.\n\n\n\n\nImage credit: Wikipedia user HereToHelp\n\n\n\n\n\nWhy is it called motherboard?\n\nIn a desktop computer, there are other boards too—the Ethernet port, “serial” ports for the keyboard and mouse, and other expansion cards—and all the other boards plug into the motherboard. In laptops, there isn’t room for many other boards, and there is no room for boards perpendicular to the motherboard, but we still use the same name.\n\n\n\n\n\n Imagine you are buying a new computer. In a group of four, have each person choose one of these reasons:\n\n\nMainly for reading email and surfing web pages (but not watching many movies).\n\n\nMainly for playing online video games.\n\n\nMainly for storing your photos and music.\n\n\nMainly for streaming online movies.\n\n\nAssume you each want the least expensive computer that does a great job for your purpose. Research what features of the computer are most important for your purpose, choose a computer, and compare notes with the rest of the group. Which computer is most expensive? Least expensive? Did you choose a laptop or a desktop, and why?\n\n\nCreate a quiz game to test a player’s knowledge of computer hardware.\n\nSprites are set to not-draggable so that the numbers don’t move. \n\n This project file contains a stage background, sprite costumes for the numbered components, and a list of components so you don’t have to type them.\n\nThings you might think about as you design your program:\n\n\nHow will the computer ask questions? Will the program choose randomly from component list?\n\n\nHow will the player answer? Will they click a number on the stage to answer?\n\n\nHow will the program treat player mistakes? Can they try again immediately? Will they move on and repeat later? Or will they have no further chance?\n\n\nDecide whether to keep score and, if so, how to do it.\n\n\nDecide whether to keep track of what’s been asked so the components don’t repeat and, if so, how to do it.\n\n\nDecide when to end the game and what to do then.\n\n\n\n\n\n\n\n\n\n\nChoose one or more of the following questions to research:\n\n\nHow does a touchscreen know where your finger is pressing?\n\n\nWhat’s a register? Why do computers have registers?\n\n\nWhat’s a cache? Why do computers have cache?"
  },
  {
    "objectID": "unit-6/lab-1/page-8.html",
    "href": "unit-6/lab-1/page-8.html",
    "title": "The Digital Domain: Integrated Circuits",
    "section": "",
    "text": "On this page, you’ll learn about the physical electronic devices inside the computer: integrated circuits.\n\n\n\nAn integrated circuit (“IC” or “chip”) is a single physical device that contains millions or billions of basic electrical parts. A processor is an IC, but not all ICs are processors; there are also special-purpose chips inside a computer.\n\n\n\nIn order to have the modern computer age, in which people can carry extremely powerful computers in their pockets (their cell phones), circuits had to become much smaller and cheaper. The invention of the integrated circuit made this possible. Integrated circuits combine (“integrate”) millions or billions of very tiny electrical parts (transistors, resistors, capacitors, and others) packaged into a small plastic box.\n\nThis is the 64-bit Intel Core i7-8700K, © 2017 Intel.\n\n\n\n\nThe Nobel Prize went to Jack Kilby, in 2000, for his 1958 demonstration of a working IC.\n\n\nThe fundamental enabling technology for the computer age was the transistor. In digital circuits, transistors are used as switches. (You’ll learn more about them on an upcoming page.) At first, each transistor was in a separate plastic package. Here’s a picture of a circuit made with discrete (separate) transistors (the black, D-shaped parts) and resistors (the brown, striped, more-or-less cylindrical parts):\n\nPhoto and circuit construction by Simon Inns. License: CC-BY-SA. Downloaded from http://www.waitingforfriday.com.\n\n\n\n\nLearn more about what’s in this picture.\n\n\nIn this picture, the transistors are the black, D-shaped parts. The brown, striped, more-or-less cylindrical parts are resistors, a much simpler component that has been around about as long as electricity. The dark lines you can see through the circuit board are wires printed on the board. If your classroom printer had liquid silver ink, it could make circuit boards like this. All the components (transistors and resistors) are on the front of the board. The wires from these components (one at each end of a resistor, three close together on the bottom of a transistor) go through the board, where they are soldered (a kind of hot metallic glue) to the circuit board’s wiring. A few wires are on the front side of the board, because otherwise the circuit couldn’t be made without the printed wires crossing each other.\n\n\nThe IBM 7090, developed in 1959, was built out of discrete transistors—over 50,000 of them. As you can imagine, this machine was large and expensive: about three million dollars, equivalent to over $55 million today. In those days, almost everyone thought that computers would be used only by large corporations or governments.\n\n\n\n\nEarly ICs could include only a few transistors. The circuit in the photo above could just about fit in one IC in the early 1960s, but progress was quick. Today’s computers require billions of transistors. The largest processor chip in 2017, the AMC Epyc, has more than 19 billion transistors!\n\n\n\nSomething as complicated as an IC relies on many levels of abstraction. If an IC has billions of transistors in it, the designer of the IC can’t position each one individually. Instead, they use a special purpose programming language that lets them create small circuit elements, then combine several of those to make a medium-size circuit element, and so on.\n\n\n\nWhat’s inside an IC or a circuit board?\n\n\n\nTantalum, tin, tungsten, and gold are referred to as conflict minerals. They are integral to the technology and other things we rely on every day: from laptops, phones, and tablets to cars, airplanes, lighting, and jewelry. Militias and rebel groups in eastern Congo, funded by the sale of these minerals, have killed over 5 million people since 1998.\n\n\nIn a Central African country rich with natural resources, Congolese miners often endure horrific living conditions, violence and oppression from militias whose conquests are funded by so-called conflict minerals.\n\n\nThe electronics industry is working with miners in the Democratic Republic of Congo to build a verifiable system so consumer devices can be built with conflict-free minerals.\n\nExcerpts from Tech Ethics: Does Conflict Free Matter?(stale link at Intel) and Intel’s Efforts Are Helping Families in the Congo See also Intel Statement on Combating Modern Slavery” Consider the source when reading these.\n\n\n\n\nDo some research on conflict minerals and some of the ways the electronics industry is working with miners to improve these conditions."
  },
  {
    "objectID": "unit-6/lab-1/page-9.html",
    "href": "unit-6/lab-1/page-9.html",
    "title": "The Digital Domain: Logic Gates",
    "section": "",
    "text": "MF: lightly clean up to make the text more concise\n\n\nDo we have any interest in salvaging the logic gates/XOR project that Selim and I worked on? –MF, 3/25/19\n\n\n\nOn this page, you review three Boolean operators (and, or, and not) and learn how they relate to electronic circuitry.\n\n\nIn a circuit with billions of transistors, or even thousands of transistors, hardware designers can’t think about each individual transistor. Just as programmers use abstraction, hardware architects use abstractions, in which a group of transistors and other circuit elements are considered as a single thing. What kinds of things? There are basically two kinds, one for memory and one for computation.\n\n\nLearn more about memory.\n\n\nMemory is made out of flip-flops. A flip-flop is a circuit that has two stable states, on and off. An input signal can tell it to turn on, turn off, or change whatever it’s state is. Once that happens, the flip-flop stays in the new state until it gets another signal. It has an output that reflects its state: on if the flip-flop is on, off if it’s off.\n\n\n\n\nBoolean Operators\n\n\nThe circuits to do computation are more interesting. They compute functions, just like reporters in Snap!. Since computers do a lot of arithmetic, you might think that the basic circuit functions would be addition, subtraction, multiplication, and division, but that’s not the case. Of course there are circuits to do those things, but they’re made out of logic gates: circuits that compute Boolean functions: and, or, and not.\n\n\nThe reason that Boolean functions are considered more fundamental is that their inputs and outputs can be represented with a single wire going into or out from the circuit. That’s not true about arithmetic functions. If you consider a voltage on a wire as meaning 1, and no voltage as meaning 0, then you have to see that an adder will have three possible output values, because 1+1=2, which is neither 0 nor 1. By contrast, if you consider a voltage on a wire as meaning True, and no voltage as meaning False, then the output from a Boolean function of two inputs can still only be True or False, so only one output wire is needed.\n\n\nYou saw some examples in Unit 2 Lab 3: Making Decisions by Using Predicates: AND, OR, and NOT:        \n\n\nSome other ways to think about Boolean operators: It is possible to emulate Boolean operations electronically and these operations are sometimes represented as truth tables (either with true/false or ones/zeros).\n\n\nA circuit emulation and truth tables for and.\n\n\nThis electric circuit shows a simplified way to emulate the Boolean operator and electronically. The two switches are in series; if both of the switches are on, the current flows and the light bulb turns on.\n\n\n\nI wonder about making this simpler by including a pic of a battery in the animation. Students have a lot to manage in this endnote without this extra piece of information that isn’t critical for the learning they are supposed to be doing. –MF, 12/4/17 \n\n\n\nThis symbol in the circuit diagrams represents a battery.  \n\n\n\nThese two tables are identical. One just shows the same pattern with true/false and the other with ones/zeros.\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgB3AEEAeQBBAEQAYwBBAE0AdwBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEgAUQBBAGMAZwBCADEAQQBIAFEAQQBhAEEAQQBpAEEAQwBBAEEAYwB3AEIAMQBBAEcAMABBAGIAUQBCAGgAQQBIAEkAQQBlAFEAQQA5AEEAQwBJAEEAZABBAEIAeQBBAEgAVQBBAGQAQQBCAG8AQQBDAEEAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEMAQQBBAFoAZwBCAHYAQQBIAEkAQQBJAEEAQgBCAEEARQA0AEEAUgBBAEEAZwBBAEgAYwBBAGEAUQBCADAAQQBHAGcAQQBJAEEAQgBtAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAEwAdwBCADAAQQBIAEkAQQBkAFEAQgBsAEEAQwBJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAFoAdwBCAHkAQQBHADgAQQBkAFEAQgB3AEEAQwBJAEEASQBBAEIAagBBAEcAOABBAGIAQQBCAHoAQQBIAEEAQQBZAFEAQgB1AEEARAAwAEEASQBnAEEAeQBBAEMASQBBAFAAZwBCAHAAQQBHADQAQQBjAEEAQgAxAEEASABRAEEAYwB3AEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBACsAQQBHADgAQQBkAFEAQgAwAEEASABBAEEAZABRAEIAMABBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQBnAEEASABNAEEAZABBAEIANQBBAEcAdwBBAFoAUQBBADkAQQBDAEkAQQBkAHcAQgBwAEEARwBRAEEAZABBAEIAbwBBAEQAbwBBAE0AUQBBAHcAQQBEAEEAQQBjAEEAQgA0AEEARABzAEEASQBnAEEAKwBBAEUARQBBAFAAQQBBAHYAQQBIAFEAQQBhAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAZwBBAEkAQQBCAHoAQQBHAE0AQQBiAHcAQgB3AEEARwBVAEEAUABRAEEAaQBBAEcATQBBAGIAdwBCAHMAQQBDAEkAQQBJAEEAQgB6AEEASABRAEEAZQBRAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBIAGMAQQBhAFEAQgBrAEEASABRAEEAYQBBAEEANgBBAEQARQBBAE0AQQBBAHcAQQBIAEEAQQBlAEEAQQA3AEEAQwBJAEEAUABnAEIAQwBBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEATwBnAEEAeABBAEQAQQBBAE0AQQBCAHcAQQBIAGcAQQBPAHcAQQBpAEEARAA0AEEAUQBRAEEAZwBBAEQAdwBBAFkAdwBCAHYAQQBHAFEAQQBaAFEAQQArAEEARwBFAEEAYgBnAEIAawBBAEQAdwBBAEwAdwBCAGoAQQBHADgAQQBaAEEAQgBsAEEARAA0AEEASQBBAEIAQwBBAEQAdwBBAEwAdwBCADAAQQBHAGcAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBFAFkAQQBZAFEAQgBzAEEASABNAEEAWgBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEUAWQBBAFkAUQBCAHMAQQBIAE0AQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARQBZAEEAWQBRAEIAcwBBAEgATQBBAFoAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBHAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUgBnAEIAaABBAEcAdwBBAGMAdwBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARgBRAEEAYwBnAEIAMQBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAEcAQQBHAEUAQQBiAEEAQgB6AEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAVgBBAEIAeQBBAEgAVQBBAFoAUQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBGAFEAQQBjAGcAQgAxAEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIAVQBBAEgASQBBAGQAUQBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAGcAQQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATgB3AEEANABBAEQARQBBAE4AUQBBAD0ACgBwAHIAZQBmAGkAeAA6AAoAcwBvAHUAcgBjAGUAOgBQAEEAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAEkAQQBCAGoAQQBHAHcAQQBZAFEAQgB6AEEASABNAEEAUABRAEEAaQBBAEgAUQBBAGMAZwBCADEAQQBIAFEAQQBhAEEAQQBnAEEARwBJAEEAYgB3AEIAeQBBAEcAUQBBAFoAUQBCAHkAQQBHAFUAQQBaAEEAQQBpAEEAQwBBAEEAYwB3AEIAMQBBAEcAMABBAGIAUQBCAGgAQQBIAEkAQQBlAFEAQQA5AEEAQwBJAEEAZABBAEIAeQBBAEgAVQBBAGQAQQBCAG8AQQBDAEEAQQBkAEEAQgBoAEEARwBJAEEAYgBBAEIAbABBAEMAQQBBAFoAZwBCAHYAQQBIAEkAQQBJAEEAQgBCAEEARQA0AEEAUgBBAEEAZwBBAEgAYwBBAGEAUQBCADAAQQBHAGcAQQBJAEEAQgA2AEEARwBVAEEAYwBnAEIAdgBBAEMAOABBAGIAdwBCAHUAQQBHAFUAQQBJAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEIAbgBBAEgASQBBAGIAdwBCADEAQQBIAEEAQQBJAGcAQQBnAEEARwBNAEEAYgB3AEIAcwBBAEgATQBBAGMAQQBCAGgAQQBHADQAQQBQAFEAQQBpAEEARABJAEEASQBnAEEAKwBBAEcAawBBAGIAZwBCAHcAQQBIAFUAQQBkAEEAQgB6AEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEQANABBAGIAdwBCADEAQQBIAFEAQQBjAEEAQgAxAEEASABRAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAbwBBAEMAQQBBAGMAdwBCAGoAQQBHADgAQQBjAEEAQgBsAEEARAAwAEEASQBnAEIAagBBAEcAOABBAGIAQQBBAGkAQQBDAEEAQQBjAHcAQgAwAEEASABrAEEAYgBBAEIAbABBAEQAMABBAEkAZwBCADMAQQBHAGsAQQBaAEEAQgAwAEEARwBnAEEATwBnAEEAeABBAEQAQQBBAE0AQQBCAHcAQQBIAGcAQQBPAHcAQQBpAEEARAA0AEEAUQBRAEEAOABBAEMAOABBAGQAQQBCAG8AQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAHAAQQBHAFEAQQBkAEEAQgBvAEEARABvAEEATQBRAEEAdwBBAEQAQQBBAGMAQQBCADQAQQBEAHMAQQBJAGcAQQArAEEARQBJAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQgBCAEEAQwBBAEEAUABBAEIAagBBAEcAOABBAFoAQQBCAGwAQQBEADQAQQBZAFEAQgB1AEEARwBRAEEAUABBAEEAdgBBAEcATQBBAGIAdwBCAGsAQQBHAFUAQQBQAGcAQQBnAEEARQBJAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAE0AQQBBADgAQQBDADgAQQBkAEEAQgBrAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEEAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQARQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEcARQBBAFkAZwBCAHMAQQBHAFUAQQBQAGcAQQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\nA circuit emulation and truth tables for or.\n\n\nThis electric circuit shows a simplified way to emulate the Boolean operator or electronically. The two switches are in parallel; if either (or both) of the switches are on, the current flows and the light bulb turns on. \n\n\n\nAs with the and tables, these two tables are identical except for whether they use true/false or ones/zeros.\n\n\nIn ordinary language, the word “or” can have two slightly different meanings. Inclusive or means “at least one of these”: If it’s raining or it’s really cold out, you need your overcoat. (If it’s both raining and cold, you’d still wear the coat.) Exclusive or means “this or that, but not both”: Eat your vegetables or you won’t get any dessert. (You’d feel cheated if you ate the vegetables and still didn’t get dessert.) In computer science (as in mathematics) the word “or” by itself always means inclusive or, as you can see in this truth table. If you mean “exclusive or,” you have to say that.\n\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAdwBBAEQAVQBBAE0AUQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAFAAQQBGAEkAQQBJAEEAQgAzAEEARwBrAEEAZABBAEIAbwBBAEMAQQBBAFoAZwBCAGgAQQBHAHcAQQBjAHcAQgBsAEEAQwA4AEEAZABBAEIAeQBBAEgAVQBBAFoAUQBBAGkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEARwBjAEEAYwBnAEIAdgBBAEgAVQBBAGMAQQBBAGkAQQBDAEEAQQBZAHcAQgB2AEEARwB3AEEAYwB3AEIAdwBBAEcARQBBAGIAZwBBADkAQQBDAEkAQQBNAGcAQQBpAEEARAA0AEEAYQBRAEIAdQBBAEgAQQBBAGQAUQBCADAAQQBIAE0AQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEAUABnAEIAdgBBAEgAVQBBAGQAQQBCAHcAQQBIAFUAQQBkAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQgBCAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAawBBAFoAQQBCADAAQQBHAGcAQQBPAGcAQQB4AEEARABBAEEATQBBAEIAdwBBAEgAZwBBAE8AdwBBAGkAQQBEADQAQQBRAGcAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBFAEUAQQBJAEEAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAHYAQQBIAEkAQQBQAEEAQQB2AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBBAGcAQQBFAEkAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEAUgBnAEIAaABBAEcAdwBBAGMAdwBCAGwAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBSAGcAQgBoAEEARwB3AEEAYwB3AEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFIAZwBCAGgAQQBHAHcAQQBjAHcAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEUAWQBBAFkAUQBCAHMAQQBIAE0AQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARgBRAEEAYwBnAEIAMQBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEYAUQBBAGMAZwBCADEAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBHAEEARwBFAEEAYgBBAEIAegBBAEcAVQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBCAFUAQQBIAEkAQQBkAFEAQgBsAEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEYAUQBBAGMAZwBCADEAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBVAEEASABJAEEAZABRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAawBBAEQANABBAFYAQQBCAHkAQQBIAFUAQQBaAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEARAA0AEEACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeABBAEQAQQBBAE4AZwBBADIAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAFAAQQBGAEkAQQBJAEEAQgAzAEEARwBrAEEAZABBAEIAbwBBAEMAQQBBAGUAZwBCAGwAQQBIAEkAQQBiAHcAQQB2AEEARwA4AEEAYgBnAEIAbABBAEMASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBaAHcAQgB5AEEARwA4AEEAZABRAEIAdwBBAEMASQBBAEkAQQBCAGoAQQBHADgAQQBiAEEAQgB6AEEASABBAEEAWQBRAEIAdQBBAEQAMABBAEkAZwBBAHkAQQBDAEkAQQBQAGcAQgBwAEEARwA0AEEAYwBBAEIAMQBBAEgAUQBBAGMAdwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGEAQQBBAGcAQQBIAE0AQQBZAHcAQgB2AEEASABBAEEAWgBRAEEAOQBBAEMASQBBAFkAdwBCAHYAQQBHAHcAQQBJAGcAQQArAEEARwA4AEEAZABRAEIAMABBAEgAQQBBAGQAUQBCADAAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBFAEUAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAGcAQQBJAEEAQgB6AEEARwBNAEEAYgB3AEIAdwBBAEcAVQBBAFAAUQBBAGkAQQBHAE0AQQBiAHcAQgBzAEEAQwBJAEEASQBBAEIAegBBAEgAUQBBAGUAUQBCAHMAQQBHAFUAQQBQAFEAQQBpAEEASABjAEEAYQBRAEIAawBBAEgAUQBBAGEAQQBBADYAQQBEAEUAQQBNAEEAQQB3AEEASABBAEEAZQBBAEEANwBBAEMASQBBAFAAZwBCAEMAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEAQwBBAEEAYwB3AEIAMABBAEgAawBBAGIAQQBCAGwAQQBEADAAQQBJAGcAQgAzAEEARwBrAEEAWgBBAEIAMABBAEcAZwBBAE8AZwBBAHgAQQBEAEEAQQBNAEEAQgB3AEEASABnAEEATwB3AEEAaQBBAEQANABBAFEAUQBBAGcAQQBEAHcAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEcAOABBAGMAZwBBADgAQQBDADgAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEMAQQBBAFEAZwBBADgAQQBDADgAQQBkAEEAQgBvAEEARAA0AEEAQwBnAEEAOABBAEMAOABBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBBAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAQQBBAFAAQQBBAHYAQQBIAFEAQQBaAEEAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAEEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBrAEEARAA0AEEATQBRAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEAQwA4AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEcAUQBBAFAAZwBBAHgAQQBEAHcAQQBMAHcAQgAwAEEARwBRAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAGsAQQBEADQAQQBNAFEAQQA4AEEAQwA4AEEAZABBAEIAawBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABFAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQQB2AEEASABRAEEAYwBnAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBZAFEAQgBpAEEARwB3AEEAWgBRAEEAKwBBAEEAPQA9AAoAcwB1AGYAZgBpAHgAOgA=:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\nA circuit emulation and truth tables for not.\n\n\nThis electric circuit shows a simplified way to emulate the Boolean operator not electronically. This switch is basically a circuit breaker: if the switch is on, the current flow is broken and the light bulb turns off; if the switch is off, the current flows directly to the light bulb and the light bulb turns on. \n\n\nAs with the other tables, these are identical for true/false vs. ones/zeros.\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAeQBBAEQAawBBAE0AQQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAE8AQQBFADgAQQBWAEEAQQBnAEEASABjAEEAYQBRAEIAMABBAEcAZwBBAEkAQQBCAG0AQQBHAEUAQQBiAEEAQgB6AEEARwBVAEEATAB3AEIAMABBAEgASQBBAGQAUQBCAGwAQQBDAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEcAawBBAGIAZwBCAHcAQQBIAFUAQQBkAEEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAKwBBAEcAOABBAGQAUQBCADAAQQBIAEEAQQBkAFEAQgAwAEEARAB3AEEATAB3AEIAMABBAEcAZwBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAYQBBAEEAZwBBAEgATQBBAFkAdwBCAHYAQQBIAEEAQQBaAFEAQQA5AEEAQwBJAEEAWQB3AEIAdgBBAEcAdwBBAEkAZwBBAGcAQQBIAE0AQQBkAEEAQgA1AEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGQAdwBCAHAAQQBHAFEAQQBkAEEAQgBvAEEARABvAEEATQBRAEEAdwBBAEQAQQBBAGMAQQBCADQAQQBEAHMAQQBJAGcAQQArAEEARQBFAEEAUABBAEEAdgBBAEgAUQBBAGEAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBnAEEASQBBAEIAegBBAEcATQBBAGIAdwBCAHcAQQBHAFUAQQBQAFEAQQBpAEEARwBNAEEAYgB3AEIAcwBBAEMASQBBAEkAQQBCAHoAQQBIAFEAQQBlAFEAQgBzAEEARwBVAEEAUABRAEEAaQBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA2AEEARABFAEEATQBBAEEAdwBBAEgAQQBBAGUAQQBBADcAQQBDAEkAQQBQAGcAQQA4AEEARwBNAEEAYgB3AEIAawBBAEcAVQBBAFAAZwBCAHUAQQBHADgAQQBkAEEAQQA4AEEAQwA4AEEAWQB3AEIAdgBBAEcAUQBBAFoAUQBBACsAQQBDAEEAQQBRAFEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBDADgAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAGMAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQgBVAEEASABJAEEAZABRAEIAbABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBGAFEAQQBjAGcAQgAxAEEARwBVAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEIARwBBAEcARQBBAGIAQQBCAHoAQQBHAFUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEEAdgBBAEgAUQBBAFkAUQBCAGkAQQBHAHcAQQBaAFEAQQArAEEAQQA9AD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602 31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEAegBBAEQASQBBAE4AUQBBADMAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEASQBBAEIAagBBAEcAdwBBAFkAUQBCAHoAQQBIAE0AQQBQAFEAQQBpAEEASABRAEEAYwBnAEIAMQBBAEgAUQBBAGEAQQBBAGcAQQBHAEkAQQBiAHcAQgB5AEEARwBRAEEAWgBRAEIAeQBBAEcAVQBBAFoAQQBBAGkAQQBDAEEAQQBjAHcAQgAxAEEARwAwAEEAYgBRAEIAaABBAEgASQBBAGUAUQBBADkAQQBDAEkAQQBkAEEAQgB5AEEASABVAEEAZABBAEIAbwBBAEMAQQBBAGQAQQBCAGgAQQBHAEkAQQBiAEEAQgBsAEEAQwBBAEEAWgBnAEIAdgBBAEgASQBBAEkAQQBCAE8AQQBFADgAQQBWAEEAQQBnAEEASABjAEEAYQBRAEIAMABBAEcAZwBBAEkAQQBCADYAQQBHAFUAQQBjAGcAQgB2AEEAQwA4AEEAYgB3AEIAdQBBAEcAVQBBAEkAZwBBACsAQQBBAG8AQQBQAEEAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEAYQBRAEIAdQBBAEgAQQBBAGQAUQBCADAAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAG8AQQBDAEEAQQBjAHcAQgBqAEEARwA4AEEAYwBBAEIAbABBAEQAMABBAEkAZwBCAGoAQQBHADgAQQBiAEEAQQBpAEEARAA0AEEAYgB3AEIAMQBBAEgAUQBBAGMAQQBCADEAQQBIAFEAQQBQAEEAQQB2AEEASABRAEEAYQBBAEEAKwBBAEEAbwBBAFAAQQBBAHYAQQBIAFEAQQBjAGcAQQArAEEAQQBvAEEAUABBAEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgBvAEEAQwBBAEEAYwB3AEIAagBBAEcAOABBAGMAQQBCAGwAQQBEADAAQQBJAGcAQgBqAEEARwA4AEEAYgBBAEEAaQBBAEMAQQBBAGMAdwBCADAAQQBIAGsAQQBiAEEAQgBsAEEARAAwAEEASQBnAEIAMwBBAEcAawBBAFoAQQBCADAAQQBHAGcAQQBPAGcAQQB4AEEARABBAEEATQBBAEIAdwBBAEgAZwBBAE8AdwBBAGkAQQBEADQAQQBRAFEAQQA4AEEAQwA4AEEAZABBAEIAbwBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBhAEEAQQBnAEEASABNAEEAWQB3AEIAdgBBAEgAQQBBAFoAUQBBADkAQQBDAEkAQQBZAHcAQgB2AEEARwB3AEEASQBnAEEAZwBBAEgATQBBAGQAQQBCADUAQQBHAHcAQQBaAFEAQQA5AEEAQwBJAEEAZAB3AEIAcABBAEcAUQBBAGQAQQBCAG8AQQBEAG8AQQBNAFEAQQB3AEEARABBAEEAYwBBAEIANABBAEQAcwBBAEkAZwBBACsAQQBEAHcAQQBZAHcAQgB2AEEARwBRAEEAWgBRAEEAKwBBAEcANABBAGIAdwBCADAAQQBEAHcAQQBMAHcAQgBqAEEARwA4AEEAWgBBAEIAbABBAEQANABBAEkAQQBCAEIAQQBEAHcAQQBMAHcAQgAwAEEARwBnAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBIAEkAQQBQAGcAQQBLAEEARAB3AEEAZABBAEIAeQBBAEQANABBAEMAZwBBADgAQQBIAFEAQQBaAEEAQQArAEEARABBAEEAUABBAEEAdgBBAEgAUQBBAFoAQQBBACsAQQBBAG8AQQBQAEEAQgAwAEEARwBRAEEAUABnAEEAeABBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBkAEEAQgB5AEEARAA0AEEAQwBnAEEAOABBAEgAUQBBAFoAQQBBACsAQQBEAEUAQQBQAEEAQQB2AEEASABRAEEAWgBBAEEAKwBBAEEAbwBBAFAAQQBCADAAQQBHAFEAQQBQAGcAQQB3AEEARAB3AEEATAB3AEIAMABBAEcAUQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEASABJAEEAUABnAEEASwBBAEQAdwBBAEwAdwBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEAPQAKAHMAdQBmAGYAaQB4ADoA:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\n\n\nLogic Gates\n\n\nInside a computer, Boolean operations are implemented in physical circuitry using logic gates. (A single gate implements one of the basic functions and, or, or not.) Logic circuits are often represented with drawings that help engineers see how the information will flow through a circuit. For example, the following diagram of a logic circuit with two gates represents the Boolean expression . Can you see how?\n\n\n\n\n\n Look at the logic circuit drawn above. For what values of A and B will the output be true?\n\n\n\n\nOn the previous page, you learned about tungsten and tin, and here we’re talking about Boolean functions. In what sense is this less abstract? From the point of view of the chip designer, logic gates are the fundamental building blocks of a digital circuit. (The actual physical chip fabrication is at an even lower level of abstraction, in the analog domain.) \n\n\n\n\n\n\n\nWhich of the following expressions will report true?\n\n\n\n\n\n\n\n\n\n\n\nI only\n\n\nEvaluate each part separately first, and then determine what the outermost block in each expression will report. In expression I: What does (true) and (false) report? What does not((true) and (false)) report? In expression II: What does (true) or (false) report? What does not((true) or (false)) report?\n\n\n\n\nII only\n\n\nCorrect!\n\n\n\n\nI and II\n\n\nTake another look at expression I. What does not((true) and (false)) (on the right) report to the outermost and block?\n\n\n\n\nNeither I nor II\n\n\nTake another look at expression II. What does (true) and (false) (on the right) report to the outermost or block?\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich of the following logic circuits will report true? (T stands for true, and F stands for false.)\n\n\nThis problem is probably harder than something you’ll see on the exam, so if you can get this one, you are doing great!\n\n31b8e172-b470-440e-83d8-e6b185028602:dAB5AHAAZQA6AE8AQQBCAGwAQQBHAFkAQQBOAFEAQgBoAEEARABjAEEATgB3AEEAeQBBAEMAMABBAFoAQQBCAGsAQQBEAFkAQQBNAHcAQQB0AEEARABRAEEATgBnAEEAeQBBAEQASQBBAEwAUQBBADQAQQBEAFEAQQBZAGcAQgBtAEEAQwAwAEEAWQBRAEIAbQBBAEQARQBBAE8AUQBBADUAQQBEAFUAQQBZAFEAQQB4AEEARwBJAEEATQBnAEIAaQBBAEQAawBBAAoAcABvAHMAaQB0AGkAbwBuADoATQBRAEEANQBBAEQARQBBAE4AUQBBADUAQQBBAD0APQAKAHAAcgBlAGYAaQB4ADoACgBzAG8AdQByAGMAZQA6AFAAQQBCADAAQQBHAEUAQQBZAGcAQgBzAEEARwBVAEEAUABnAEEASwBBAEQAdwBBAGQAQQBCAHkAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAZwBBAEgAYwBBAGEAUQBCAGsAQQBIAFEAQQBhAEEAQQA5AEEAQwBJAEEATQBnAEEAdwBBAEQAQQBBAEkAZwBBACsAQQBEAHcAQQBiAEEAQgBwAEEARAA0AEEAUABBAEIAcABBAEcAMABBAFoAdwBBAGcAQQBHAE0AQQBiAEEAQgBoAEEASABNAEEAYwB3AEEAOQBBAEMASQBBAGEAUQBCAHUAQQBHAHcAQQBhAFEAQgB1AEEARwBVAEEASQBBAEIAdQBBAEcAOABBAGMAdwBCAG8AQQBHAEUAQQBaAEEAQgB2AEEASABjAEEASQBnAEEAZwBBAEgATQBBAGMAZwBCAGoAQQBEADAAQQBJAGcAQQB2AEEARwBJAEEAYQBnAEIAagBBAEMAMABBAGMAZwBBAHYAQQBHAGsAQQBiAFEAQgBuAEEAQwA4AEEATgBnAEEAdABBAEcATQBBAGIAdwBCAHQAQQBIAEEAQQBkAFEAQgAwAEEARwBVAEEAYwBnAEIAegBBAEMAOABBAGIAQQBCAHYAQQBHAGMAQQBhAFEAQgBqAEEAQwAwAEEAWgB3AEIAaABBAEgAUQBBAFoAUQBCAHoAQQBDADAAQQBjAFEAQgAxAEEARwBrAEEAZQBnAEEAdABBAEcASQBBAEwAZwBCAHcAQQBHADQAQQBaAHcAQQBpAEEAQwBBAEEAWQBRAEIAcwBBAEgAUQBBAFAAUQBBAGkAQQBHAHcAQQBiAHcAQgBuAEEARwBrAEEAWQB3AEEAZwBBAEcAYwBBAFkAUQBCADAAQQBHAFUAQQBJAEEAQgBrAEEARwBrAEEAWQBRAEIAbgBBAEgASQBBAFkAUQBCAHQAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEASwBBAEIAdQBBAEcAOABBAGQAQQBBAGcAQQBDAGcAQQBLAEEAQgBVAEEAQwBBAEEAWQBRAEIAdQBBAEcAUQBBAEkAQQBCAEcAQQBDAGsAQQBLAFEAQQBnAEEARwA4AEEAYwBnAEEAZwBBAEMAZwBBAFYAQQBBAGcAQQBHAEUAQQBiAGcAQgBrAEEAQwBBAEEAUgBnAEEAcABBAEMAawBBAEkAZwBBAGcAQQBIAFEAQQBhAFEAQgAwAEEARwB3AEEAWgBRAEEAOQBBAEMASQBBAGIAQQBCAHYAQQBHAGMAQQBhAFEAQgBqAEEAQwBBAEEAWgB3AEIAaABBAEgAUQBBAFoAUQBBAGcAQQBHAFEAQQBhAFEAQgBoAEEARwBjAEEAYwBnAEIAaABBAEcAMABBAEkAQQBCAHYAQQBHAFkAQQBJAEEAQQBvAEEARwA0AEEAYgB3AEIAMABBAEMAQQBBAEsAQQBBAG8AQQBGAFEAQQBJAEEAQgBoAEEARwA0AEEAWgBBAEEAZwBBAEUAWQBBAEsAUQBBAHAAQQBDAEEAQQBiAHcAQgB5AEEAQwBBAEEASwBBAEIAVQBBAEMAQQBBAFkAUQBCAHUAQQBHAFEAQQBJAEEAQgBHAEEAQwBrAEEASwBRAEEAaQBBAEMAQQBBAEwAdwBBACsAQQBEAHcAQQBMAHcAQgBzAEEARwBrAEEAUABnAEEAOABBAEMAOABBAGQAQQBCAGsAQQBEADQAQQBDAGcAQQA4AEEASABRAEEAWgBBAEEAKwBBAEQAdwBBAGIAQQBCAHAAQQBEADQAQQBQAEEAQgBwAEEARwAwAEEAWgB3AEEAZwBBAEcATQBBAGIAQQBCAGgAQQBIAE0AQQBjAHcAQQA5AEEAQwBJAEEAYQBRAEIAdQBBAEcAdwBBAGEAUQBCAHUAQQBHAFUAQQBJAEEAQgB1AEEARwA4AEEAYwB3AEIAbwBBAEcARQBBAFoAQQBCAHYAQQBIAGMAQQBJAGcAQQBnAEEARwBFAEEAYgBBAEIAcABBAEcAYwBBAGIAZwBBADkAQQBDAEkAQQBZAGcAQgB2AEEASABRAEEAZABBAEIAdgBBAEcAMABBAEkAZwBBAGcAQQBIAE0AQQBjAGcAQgBqAEEARAAwAEEASQBnAEEAdgBBAEcASQBBAGEAZwBCAGoAQQBDADAAQQBjAGcAQQB2AEEARwBrAEEAYgBRAEIAbgBBAEMAOABBAE4AZwBBAHQAQQBHAE0AQQBiAHcAQgB0AEEASABBAEEAZABRAEIAMABBAEcAVQBBAGMAZwBCAHoAQQBDADgAQQBiAEEAQgB2AEEARwBjAEEAYQBRAEIAagBBAEMAMABBAFoAdwBCAGgAQQBIAFEAQQBaAFEAQgB6AEEAQwAwAEEAYwBRAEIAMQBBAEcAawBBAGUAZwBBAHQAQQBHAEUAQQBMAGcAQgB3AEEARwA0AEEAWgB3AEEAaQBBAEMAQQBBAFkAUQBCAHMAQQBIAFEAQQBQAFEAQQBpAEEARwB3AEEAYgB3AEIAbgBBAEcAawBBAFkAdwBBAGcAQQBHAGMAQQBZAFEAQgAwAEEARwBVAEEASQBBAEIAawBBAEcAawBBAFkAUQBCAG4AQQBIAEkAQQBZAFEAQgB0AEEAQwBBAEEAYgB3AEIAbQBBAEMAQQBBAEsAQQBBAG8AQQBGAFEAQQBJAEEAQgB2AEEASABJAEEASQBBAEIARwBBAEMAawBBAEkAQQBCAGgAQQBHADQAQQBaAEEAQQBnAEEAQwBnAEEAYgBnAEIAdgBBAEgAUQBBAEkAQQBBAG8AQQBGAFEAQQBJAEEAQgB2AEEASABJAEEASQBBAEIARwBBAEMAawBBAEsAUQBBAHAAQQBDAEkAQQBJAEEAQgAwAEEARwBrAEEAZABBAEIAcwBBAEcAVQBBAFAAUQBBAGkAQQBHAHcAQQBiAHcAQgBuAEEARwBrAEEAWQB3AEEAZwBBAEcAYwBBAFkAUQBCADAAQQBHAFUAQQBJAEEAQgBrAEEARwBrAEEAWQBRAEIAbgBBAEgASQBBAFkAUQBCAHQAQQBDAEEAQQBiAHcAQgBtAEEAQwBBAEEASwBBAEEAbwBBAEYAUQBBAEkAQQBCAHYAQQBIAEkAQQBJAEEAQgBHAEEAQwBrAEEASQBBAEIAaABBAEcANABBAFoAQQBBAGcAQQBDAGcAQQBiAGcAQgB2AEEASABRAEEASQBBAEEAbwBBAEYAUQBBAEkAQQBCAHYAQQBIAEkAQQBJAEEAQgBHAEEAQwBrAEEASwBRAEEAcABBAEMASQBBAEkAQQBBAHYAQQBEADQAQQBQAEEAQQB2AEEARwB3AEEAYQBRAEEAKwBBAEQAdwBBAEwAdwBCADAAQQBHAFEAQQBQAGcAQQBLAEEARAB3AEEATAB3AEIAMABBAEgASQBBAFAAZwBBAEsAQQBEAHcAQQBMAHcAQgAwAEEARwBFAEEAWQBnAEIAcwBBAEcAVQBBAFAAZwBBAD0ACgBzAHUAZgBmAGkAeAA6AA==:31b8e172-b470-440e-83d8-e6b185028602\n\n\n\n\nI only\n\n\nCorrect!\n\n\n\n\nII only\n\n\nTry building both diagrams in Snap! similarly to the images in Question 1 above.\n\n\n\n\nI and II\n\n\nTake another look at diagram II. What signal does the right side send to the AND gate?\n\n\n\n\nNeither I nor II\n\n\nTake another look at diagram I. What signal does the left side send to the OR gate?\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow do engineers draw logic gates?\n\n\n Engineers typically draw logic gates horizontally and use special shapes that represent each gate:     For example, engineers would draw the logic circuit shown at right like this:   Do an image search for “logic gate diagrams” to see more examples."
  },
  {
    "objectID": "unit-6/lab-2/page-1.html",
    "href": "unit-6/lab-2/page-1.html",
    "title": "A Brief History of Computers",
    "section": "",
    "text": "On this page, you will explore the long history of devices used for computation.\n\n\nWhen was the first computer built? That depends on where you draw the line between computers and non-computers.\n\n\n\nQuestion 1: Answer this on the Google Form\n\n\n\nExplore the timeline below, which shows selected events in the history of computing starting 20,000 years ago. Decide what you think makes sense to call the first real computer. Why?\n\n\n\n\n\n\n\n\n\nTally Sticks - First known computing aid.\n\n\n\nTally Sticks (c. 18,000 BCE)\n\n\n20,000 years ago people cut patterns of notches into animal bones. Some experts believe that tally sticks were used to perform arithmetic computations.\n\n\n\n\n\nAbacus - Ancient calculator, still in use.\n\n\n\nThe Abacus (c. 2,000 BCE)\n\n\nThe abacus is a computing device invented about 4,000 years ago. People who are well-trained to use it can perform calculations remarkably quickly, including square roots and cube roots on multi-digit numbers. In some countries, the abacus is still widely used today.\n\n\nImage by Wikimedia user HB, Public Domain.\n\n  The computation algorithms are executed by the user, not the device.\n\n\n\n\nOrrery - Mechanical device that computes planets’ orbits.\n\n\n\nThe Orrery (c. 100 BCE)\n\n\nSince antiquity, many special-purpose computing devices have been invented. For example this orrery displayed the positions of the planets in the Solar System. The first known device of this kind dated from about 2100 years ago. People at that time generally believed that the sun and other planets all revolved around the Earth, making the positions very complicated to work out, so the mechanism was much harder to design and build than it would be today.\n\nNo machine-readable image author provided. Marsyas assumed (based on copyright claims). GFDL, CC-BY-SA-3.0, or CC BY 2.5, via Wikimedia Commons.\n\n\n\n\nHere is a modern example of an orrery.\n\nImage by flickr userKaptain Kobold, licensed under the Creative Commons Attribution 2.0\n\n\n\n\n\n\n\nDifference Engine - Charles Babbage: Mechanical single-purpose computer.\n\n\n\nThe Difference Engine (c. 1822)\n\n\nIn 1822, Charles Babbage designed a device he called a “Difference Engine.” Made of precisely milled metal gears, it would compute and print tables of numbers, like log or trig functions. See more on the digital architecture page.\n\n\n\n\n\nAnalytical Engine - Babbage: First stored-program computer.\n\n\n\nThe Analytical Engine (c. 1833)\n\n\nThe Difference Engine could compute various functions by manually setting the starting position of its gears, but it had only one algorithm, built into the hardware design. In 1833, Babbage began a more ambitious project, the Analytical Engine. It was based on the general idea of the Difference Engine, but with a crucial difference: It could carry out instructions in a primitive programming language, prepared on punched cards. See more on the digital architecture page.\n\n\n\n\n\nFirst Programmer - Ada Lovelace: First to understand the potential of programs for non-numeric data.\n\n\n\nThe First Programmer (c. 1842)\n\n\nBabbage’s design was very versatile, but his interest was still mainly in printing tables of numbers. It was his collaborator Ada, Countess Lovelace, who first recognized that the numbers in Babbage’s computer could be used not only as quantities but also as representing musical notes, text characters, and so on. See more on the digital architecture page.\n\n\n\nImage by Alfred Edward Chalon, Science & Society Picture Library, Public Domain, via Wikimedia.\n\n\n\n\n\nAlan Turing wins World War II - Alan Turing leads a team that breaks the Enigma code using a very early electronic programmable computer.\n\n\n\nAlan Turing Wins World War II (1940s)\n\n\nWell, we’re exaggerating. Many people contributed to the Nazi defeat. But they weren’t all soldiers; some were mathematicians. Turing, who went on to develop the beginning ideas of computer science and to prove the Halting Theorem, which you saw in Unit 5, Lab 4: An Undecidable Problem, was the leader of a British team of mathematicians who made a breakthrough in decrypting messages encrypted with the German Enigma machine.\n\n\nCryptanalysis of the Enigma enabled western Allies in World War II to read substantial amounts of secret Morse-coded radio communications of the Axis powers. The western Supreme Allied Commander Dwight D. Eisenhower considered the military intelligence from this and other decrypted Axis radio and teleprinter transmissions “decisive” to the Allied victory…\n\n\nAlan Turing, a Cambridge University mathematician and logician, provided much of the original thinking and designed the device. Engineer Harold “Doc” Keen turned Turing’s ideas into a working machine. (adapted from Cryptanalysis of the Enigma, Wikipedia CC-BY-SA)\n\n\n\n\n\nFirst Mouse, Window System, etc. - Douglas Engelbart: An amazing number of firsts, including first hypertext, first collaborative editing, first video calling, much more.\n\n\n\n“The mother of all demos” (1960s)\n\n\nThe first public demonstration in 1968 of a mouse, colleagues separated by miles working on the same screen, and many other technologies we now take for granted was so astonishing to the audience that it became known as “the mother of all demos.” (Just search that name on Wikipedia or YouTube.)\n\n\nThe inventor of this system, Douglas Engelbart, had a lifelong interest in using technology to augment human intelligence, in particular to support collaboration among people physically distant. He studied people doing intellectual work and noted that when they’re not using a computer they don’t sit rigidly in front of their desks; they wheel their chairs around the room as they grab books or just think. So he designed an office chair attachment of a lapboard containing a keyboard and a mouse—the first mouse. He also invented a way for people to collaborate on the same page at the same time, seeing each others’ mouse cursors. Documents created in the system had hyperlinks to other documents, long before the Web was invented and used this idea. There were lots of smaller firsts, too, such as a picture-in-picture display of the other person’s face camera, long before Skype. People remember Engelbart mostly because of the mouse, but he pioneered many features of the modern graphical user interface (GUI).\n\n\n\n\n\nSketchpad - Ivan Sutherland: First object-oriented programming system, early interactive display graphics.\n\n\n\nSketchpad (1963)\n\n\nIvan Sutherland’s 1963 Ph.D. thesis project, a program to help in drawing blueprints from points, line segments and arcs of circles, pioneered both object oriented programming and the ability to draw on a screen (using a light pen; the mouse hadn’t been invented yet). It was one of the first programs with an interactive graphical user interface, so people who weren’t computer programmers could use it easily.\n\n\nSearch for “Sketchpad” on YouTube to see a demonstration of this software.\n\n\n\n\n\nARPANET - The first version of what became the Internet.\n\n\n\nARPANET (1969)\n\n\nThe Advanced Research Projects Agency\n(ARPA) of the US Defense Department was and is still the main funder of computer science research in the United States. In the late 1960s through the early 1980s they supported the development of a network connecting mainly universities with ARPA-funded projects, along with a few military bases. The initial network in 1969 consisted of four computers, three in California and one in Utah. At its peak, around 1981, there were about 200 computers on the net. With such a small number of computers, each of them knew the name and “host number” of all the others. Special gateway computers called IMPs (Interface Message Processors) were used to connect the host computers to the network, like a router today.\n\n\nOnly organizations with ARPA research grants could be on the net. This meant almost all the network sites were universities, along with a small number of technology companies doing work for ARPA. Everyone knew everyone, and so the network was built around trust. People were encouraged to use other sites’ resources; there was a yearly published directory of all the network computers, including, for most of them, information on how to log in as a guest user. It was a much friendlier spirit than today’s Internet, with millions of computers and millions of users who don’t know or trust each other. But the friendly spirit was possible only because access to the ARPANET was strongly restricted.\n\n\nThe architects of the ARPANET knew that a system requiring every computer to know the address of every other computer wasn’t going to work for a network accessible to everyone. Their plan was to build a network of networks—the Internet. The TCP/IP protocol stack was designed and tested on the ARPANET.\n\n\n\n\n\nThe Internet - First network of networks, based on TCP/IP.\n\n\n\nInternet (1986)\n\n\nGradually the ARPANET was divided into pieces. The first big pieces were MILNET for military bases and NSFnet, established in 1986 by the National Science Foundation, for research sites. This split was the beginning of the Internet. Smaller regional networks were created. Communication companies such as AT&T created commercial networks that anyone could join. Network access spread worldwide through satellite radio and through undersea cables. In 1995 the NSFnet was abolished, and everyone connected to the net through commercial Internet Service Providers.\n\n\n\n\n\nThe World Wide Web - Tim Berners-Lee: First widely available hypertext (clickable links) system.\n\n\n\nWorld Wide Web (1989-90)\n\n\nIn the early days of the net, the main application-level protocols were Telnet, which allowed a user to log in remotely to another computer, and FTP (File Transfer Protocol), for copying files from one computer to another. FTP is great if you already know what you’re looking for, and exactly where it is in the other computer’s file system.\n\n\nSeveral people had the idea of a system that would allow users to embed links to files into a conversation, so you could say “I think this document might help you.” In 1945, Vannevar Bush described a hypothetical device with the ability to embed links in files. In 1963, Ted Nelson made up the word “hypertext” as the name for this feature, but the first actual implementation was Douglas Engelbart’s system NLS, developed starting in 1963 and demonstrated in 1968.\n\n\nIn 1989, physicist Tim Berners-Lee implemented a hypertext system and named it the World Wide Web. At first it was used only by physicists, to share data and ideas. But by then the Internet was running, so his timing was right, and the name was much more appealing than the technical-sounding “hypertext” (although, as you saw in Unit 4, Lab 3: A Hierarchy of Open Protocols, behind the scenes, the protocol that makes the Web work is called the “HyperText Transfer Protocol” or HTTP). The growth of the Web was very rapid, from about 500 servers in 1993 to over 10,000 in 1994. Today, many people talk as if “the Internet” and “the Web” were the same thing, but you’ve learned that they are not in Unit 4, Lab 1: What Is the Internet?.\n\n\nBerners-Lee’s vision was of a Web in which everyone would be both a creator and a consumer of information. But the Web quickly became a largely one-way communication, with a few commercial websites getting most of the traffic. Today, most Web traffic goes to Google, Facebook, CNN, Amazon, and a few others. But some degree of democracy came back to the Web with the invention of the blog (short for “web log”) in which ordinary people can post their opinions and hope that other people will notice them.\n\n\n\n\n\nFirst Smartphones - First portable devices combining cell phone with pocket computer.\n\n\n\nSmartphones (1990s)\n\n\nThe first device that could be thought of as a smartphone was demonstrated in 1992 and available for sale in 1994. But through the 1990s, people who wanted portable digital devices could get a cell phone without apps, and a “personal digital assistant” (PDA) that did run apps but couldn’t make phone calls. Around 1999, a few companies developed devices with the phone and the PDA in one housing, sharing the screen but essentially two separate computers in one box. The Kyocera 6035, in the photo, was a telephone with the flap closed, but was a Palm Pilot PDA with the flap open.\n\n\nKyocera 6035  image by KeithTyler, Public Domain\n\n\nThere is something weird about this image file, and I can’t figure it out. Moving on. –MF, 12/7/17\n\n\n\nIt was in the late 2000s that the two functions of a smartphone were combined in a single processor, with the telephone dialer as just one application-level program.\n\n\n\n\n\nChess program beats world champion - Deep Fritz program beats Vladimir Kramnik.\n\n\n\nChess program beats world champion (2006)\n\n\nProgrammers have been trying to design and build chess programs since at least 1941 (Konrad Zuse). Over the following decade, several of the leading computer science researchers (including Alan Turing, in 1951) published ideas for chess algorithms, but the first actual running programs came in 1957. In 1978, a chess program won a game against a human chess master, David Levy, but Levy won the six-game match 4½–1½. (The half points mean that one game was a tie.)\n\n\nThere are only finitely many possible chess positions, so in principle a program could work through all possible games and produce a complete dictionary of the best possible move for each player from each position. But there are about 1043 board positions, and in 1950, Claude Shannon estimated that there are about 10120 possible games, far beyond the capacity of even the latest, fastest computers. Chess programs, just like human players, can only work out all possible outcomes of the next few moves, and must then make informed guesses about which possible outcome is the best.\n\n\nA turning point in computer chess came in 1981, when the program Cray Blitz was the first to win a tournament, beat a human chess master, and earn a chess master rating for itself. The following year, the program Belle became the second computer program with a chess master rating. In 1988 two chess programs, HiTech and Deep Thought, beat human chess grandmasters.\n\n\nIn 1997, Deep Blue, an IBM-built special-purpose computer just to play chess, with 30 processors plus 480 special-purpose ICs to evaluate positions, beat world chess champion Garry Kasparov in a six-game match, 3½–2½. Its special hardware allowed Deep Blue to evaluate 200 million board positions per second.\n\n\nIn 2006, world chess champion Vladimir Kramnik was defeated 4-2 in a six-game match by Deep Fritz, a chess program running on an ordinary computer. Although the score looks overwhelming, one of the games Deep Fritz won was almost a win for Kramnik, who failed to see a winning move for himself and instead set up the computer for a one-move checkmate. Without this blunder, the match would have been tied 3–3.\n\n\nChess programs continue to improve. In 2009, the program Pocket Fritz 4, running on a cell phone, won a tournament and reached grandmaster rating. The program, in contrast to Deep Blue, could evaluate only 20,000 positions per second, so this win shows an improvement in strategy, not just an improvement in brute force computer speed.\n\n\n\n\n\nSiri - Apple’s personal assistant for the iPhone.\n\n\n\nSiri (2011)\n\n\nSiri is Apple’s personal assistant software. It was first released as a third-party app in the App Store in 2010; Apple then bought the company that made it, and included Siri as part of iOS in 2011.\n\n\nSiri was not the first program to understand speech. Dragon Dictate, a speech-to-text program was released in 1990. Research laboratory efforts started much earlier than that; in 1952, a program developed at Bell Labs was able to understand spoken digits. As time went on, the number of words understood by the programs increased. In 2002, Microsoft introduced a version of its Office programs (including Word) that would take spoken dictation.\n\n\nIn 2006, the National Security Administration (NSA) started using software to recognize keywords in the telephone calls it spies on.\n\n\nThe first cell phone app using speech recognition was Google’s Voice Search in 2008, but it just entered the words it heard in a search bar without trying to understand them. What was new in Siri wasn’t speech recognition, but its ability to understand the sentences spoken by its users as commands to do something: “Call Fred,” “Make an appointment with Sarah for 3pm tomorrow,” and so on.\n\n\nReviews of Siri’s performance in 2011 weren’t all good. It had trouble understanding Southern US or Scottish accents. It had a lot of trouble with grammatically ambiguous sentences. Its knowledge of local landmarks was spotty. Nevertheless, it prompted a new surge of buyers of Apple telephones.\n\n\nMore recently, Microsoft (Cortana), Amazon (Alexa), and Google (Assistant) have introduced competing speech-based personal assistant programs.\n\n\n\n\n\nPokémon Go - First widely used augmented reality game.\n\n\n\nPokémon Go (2016)\n\n\nAugmented reality is a technique in which the user sees the real world, but with additional pictures or text superimposed on it. Although it had been used earlier, the first major public exposure to augmented reality was in the game Pokémon Go. Players walk around while looking at their phone screens, which show what the camera is seeing, but with the occasional addition of a cartoon character for the player to catch. Every player looking at the same place sees the same character, because the game uses the phone’s GPS to locate the player.\n\n\nThe programming of the game was impressive, but even more impressive was the effort the developers put into placing the cartoon characters at locations around the world that are accessible, open to the public, and not offensive. (Niantic, the company that developed the game, had to remove some locations from their list because of complaints, including cemeteries and Holocaust museums.)\n\n\nThe game was downloaded over 500 million times in 2016, and, unusually for a video game, was enthusiastically supported by many players’ parents, because the game gets players out of the house, and getting exercise from walking around. Also, because players congregate at the locations of Pokémon, the game encouraged real-life friendships among players. On the other hand, there were safety concerns, partly because players would cross streets staring into their phones instead of watching for traffic, and partly because certain Pokémon were placed in front of fire stations, or in locations that encouraged players to cross railroad tracks.\n\n\n\n\n\nIBM Quantum Experience - A 16-qubit quantum computer available for free use on the Internet.\n\n\n\nIBM Quantum Experience (QX) (2017)\n\n\nIBM first put a five-qubit (quantum bit) quantum computer on the Internet in 2016 (see Quantum Computing - IBM Q - US), but the following year they added a much more powerful 16-qubit computer. (The qubit is the equivalent for quantum computers of a bit in ordinary computers.) Anyone can use it, free of charge, although there is always a waiting list for appointments.\n\n\nThe usual oversimplified description of quantum computing is that a qubit (pronounced “Q bit”) is “both zero and one at the same time.” It’s closer to say that a qubit is either zero or one, but we don’t know which until it is examined at the end of a computation, at which point it becomes an ordinary bit with a fixed value. This means that a quantum computer with 16 qubits isn’t quite as powerful as 216\nseparate computers trying every possible combination of bit values in parallel. We know that certain exponential-time algorithms can be solved in polynomial time by quantum computers, and we know that certain others can’t, but there is still a big middle ground of exponential-time algorithms for which we don’t know how fast quantum computers can be.\n\n\nThe IBM QX has been used for a wide variety of quantum computations, ranging from academic research to a multiplayer Quantum Battleship game.\n\n\n\n\n\n\n\n\nKeep in mind this timeline is outdated…  But look at the timeline. The year markers at the bottom are equally spaced, but the number of years between them is not the same. The number of years does change in a regular way from marker to marker: right to left it goes up by a multiple of ten. We call such a scale logarithmic.\n\n\n\n\nQuestion 2: Answer this on the Google Form\n\n\n\nDiscussion:\n\n\nDoes a device have to be programmable to be a computer?\n\n\nDoes it have to operate by itself?\n\n\n\n\n\n\nHere are two key ideas:\n\n\nSoftware, in the form of a program stored in the computer’s memory, is, itself, a kind of abstraction. It is what makes a computer usable for more than one purpose.\n\n\nWe didn’t get usable computers until there was an underlying technology (the transistor) small enough, inexpensive enough, and fast enough to support the program abstraction."
  },
  {
    "objectID": "unit-6/lab-2/page-2.html",
    "href": "unit-6/lab-2/page-2.html",
    "title": "Moore’s Law",
    "section": "",
    "text": "On this page, you’ll learn that computer processor speed and memory size have approximately doubled every year or two, for over 50 years.\nIn 1965, Gordon Moore, one of the pioneers of integrated circuits, predicted that the number of transistors that could be fit on one chip would double every year. In 1975, he revised his estimate to doubling every two years. This prediction is known as Moore’s Law.\nIt turns out that other important measurements have also shown roughly the same doubling behavior, such as processor speed and the amount of memory that fits in a computer. Doubling hardware speed improves the size of problems that you can efficiently handle.\nThe importance of Moore’s Law isn’t just that computers get bigger and faster over time; it’s that engineers can predict how much bigger and faster, which helps them plan the software and hardware development projects to start today, for use five years from now."
  },
  {
    "objectID": "unit-6/lab-2/page-2.html#limitations-to-moores-law",
    "href": "unit-6/lab-2/page-2.html#limitations-to-moores-law",
    "title": "Moore’s Law",
    "section": "Limitations to Moore’s Law",
    "text": "Limitations to Moore’s Law\n\n\nFor transistor counts to keep growing, the size of a transistor must keep getting smaller. But chip density and processor speed have run up against an important limit: denser chips and faster signal processing both generate increased heat. Current technology is right at the edge of generating enough heat to melt the chips, destroying the computer. This is why processor chips are surrounded by metal heat sinks (one shown right), which conduct heat away from the chip and into the air.\n\n\n\n\nHeat sinks aren’t solid blocks of metal; they have spikes and zigzags. Figure out or look up why.\n\n\n\n\nBecause of the heat problem, chip manufacturers have, at least temporarily, given up on making processors faster. Instead, they are putting more than one processor on a chip. If a computation can carry out the same algorithm on different parts of the data at the same time (in parallel—sort of like sprite clones all running the same script at the same time), then these multicore chips can have an effective speed much greater than the speed of a single processor. A computer you buy today is likely to have two or four processors on one chip. But using multicore efficiently requires that the software be written with multicore in mind.\n\n\nLearn about limitations to Moore’s Law.\n\n\nSome time in the next decade, the size of a transistor will approach the size of an atom, but at the atomic scale, transistors won’t work for various reasons. There is a more fundamental limit to the density of transistors on a chip than just heat issues. And similarly, there are fundamental limitations that affect the speed of a processor, such as the speed of electrons through a wire.\n\n\nMoore’s Law optimists argue that technologies other than transistors will become usable before manufacturers hit a fundamental limit. One such approach would involve using an individual electron to represent one bit. Electrons are smaller than atoms, so this technology would allow further dramatic increases in density. Another approach would use light beams rather than electric current to hold bits. But these developments are still far away.\n\n\n\n\n\n\n\n\n\nAs Gordon Moore observed in 1965, data show that computer processing speeds roughly double every two years. Technology companies use this observation, now known as “Moore’s Law,’ in their planning. From the following, identify which one best describes how technology companies can use Moore’s Law in planning.\n\n\n\nThey can expect to double their profits every two years.\n\n\nNo such thing is possible to predict using Moore’s Law.\n\n\n\n\nThey can anticipate the precise dates when the latest computing advancements will be available and therefore accurately plan their products in advance.\n\n\nNo such thing is possible to predict using Moore’s Law.\n\n\n\n\nThey can base their R&D (Research and Development) targets on expected future processing speeds.\n\n\nCorrect.\n\n\n\n\nThey can expect their costs to double with each increase in processor speed.\n\n\nNo such thing is possible to predict using Moore’s Law."
  }
]