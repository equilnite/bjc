[
  {
    "objectID": "create-task/index.html",
    "href": "create-task/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "AP Create Performance Task\nFor this course, you will be working on a project that will be graded both by your teacher and the AP exam scorers.\nThe project is mainly graded based off your understanding of the main ideas of the course (“Computer Science Principles”), through a write-up.\nThe main components of this project"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction\nWelcome to the Beauty and Joy of Computing — BJC.\nThrough this curriculum, you will create programs using the Snap programming language, you will learn some of the most powerful ideas of computer science, and you will discuss the social implications of computing, thinking deeply about how you can be personally active in promoting the benefits and reducing the possible harms.\nUnits 1-5 cover all of the AP CSP curriculum framework. You will be ready for the exam."
  },
  {
    "objectID": "unit-1/index.html",
    "href": "unit-1/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-1/lab-1/page-1.html",
    "href": "unit-1/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-1/lab-1/page-1.html#creating-an-account",
    "href": "unit-1/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-1/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-1/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-1/page-2.html",
    "href": "unit-1/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-1/lab-1/page-2.html#making-a-character-move",
    "href": "unit-1/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-1/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-1/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-1/page-3.html",
    "href": "unit-1/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-1/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-1/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html",
    "href": "unit-1/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-1/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html#keeping-score",
    "href": "unit-1/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-1/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-1/lab-1/page-4.html#ending-the-game",
    "href": "unit-1/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-1/page-5.html",
    "href": "unit-1/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/lab-2/page-1.html",
    "href": "unit-1/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-2/page-2.html",
    "href": "unit-1/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-2/page-3.html",
    "href": "unit-1/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-2/page-4.html",
    "href": "unit-1/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-2/page-5.html",
    "href": "unit-1/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/lab-3/page-1.html",
    "href": "unit-1/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-3/page-2.html",
    "href": "unit-1/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-3/page-3.html",
    "href": "unit-1/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-3/page-4.html",
    "href": "unit-1/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-3/page-5.html",
    "href": "unit-1/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/lab-4/page-1.html",
    "href": "unit-1/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-4/page-2.html",
    "href": "unit-1/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-4/page-3.html",
    "href": "unit-1/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-4/page-4.html",
    "href": "unit-1/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-4/page-5.html",
    "href": "unit-1/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/lab-5/page-1.html",
    "href": "unit-1/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/lab-5/page-2.html",
    "href": "unit-1/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/lab-5/page-3.html",
    "href": "unit-1/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/lab-5/page-4.html",
    "href": "unit-1/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/lab-5/page-5.html",
    "href": "unit-1/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-1/optional-projects/page-1.html",
    "href": "unit-1/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-1/optional-projects/page-2.html",
    "href": "unit-1/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-1/optional-projects/page-3.html",
    "href": "unit-1/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-1/optional-projects/page-4.html",
    "href": "unit-1/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-1/optional-projects/page-5.html",
    "href": "unit-1/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/index.html",
    "href": "unit-2/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-2/lab-1/page-1.html",
    "href": "unit-2/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-2/lab-1/page-1.html#creating-an-account",
    "href": "unit-2/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-2/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-2/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-1/page-2.html",
    "href": "unit-2/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-2/lab-1/page-2.html#making-a-character-move",
    "href": "unit-2/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-2/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-2/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-1/page-3.html",
    "href": "unit-2/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-2/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-2/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html",
    "href": "unit-2/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-2/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html#keeping-score",
    "href": "unit-2/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-2/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-2/lab-1/page-4.html#ending-the-game",
    "href": "unit-2/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-1/page-5.html",
    "href": "unit-2/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/lab-2/page-1.html",
    "href": "unit-2/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-2/page-2.html",
    "href": "unit-2/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-2/page-3.html",
    "href": "unit-2/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-2/page-4.html",
    "href": "unit-2/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-2/page-5.html",
    "href": "unit-2/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/lab-3/page-1.html",
    "href": "unit-2/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-3/page-2.html",
    "href": "unit-2/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-3/page-3.html",
    "href": "unit-2/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-3/page-4.html",
    "href": "unit-2/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-3/page-5.html",
    "href": "unit-2/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/lab-4/page-1.html",
    "href": "unit-2/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-4/page-2.html",
    "href": "unit-2/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-4/page-3.html",
    "href": "unit-2/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-4/page-4.html",
    "href": "unit-2/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-4/page-5.html",
    "href": "unit-2/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/lab-5/page-1.html",
    "href": "unit-2/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/lab-5/page-2.html",
    "href": "unit-2/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/lab-5/page-3.html",
    "href": "unit-2/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/lab-5/page-4.html",
    "href": "unit-2/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/lab-5/page-5.html",
    "href": "unit-2/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-2/optional-projects/page-1.html",
    "href": "unit-2/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-2/optional-projects/page-2.html",
    "href": "unit-2/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-2/optional-projects/page-3.html",
    "href": "unit-2/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-2/optional-projects/page-4.html",
    "href": "unit-2/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-2/optional-projects/page-5.html",
    "href": "unit-2/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/index.html",
    "href": "unit-3/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-3/lab-1/page-1.html",
    "href": "unit-3/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-3/lab-1/page-1.html#creating-an-account",
    "href": "unit-3/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-3/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-3/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-1/page-2.html",
    "href": "unit-3/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-3/lab-1/page-2.html#making-a-character-move",
    "href": "unit-3/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-3/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-3/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-1/page-3.html",
    "href": "unit-3/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-3/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-3/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html",
    "href": "unit-3/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-3/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html#keeping-score",
    "href": "unit-3/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-3/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-3/lab-1/page-4.html#ending-the-game",
    "href": "unit-3/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-1/page-5.html",
    "href": "unit-3/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/lab-2/page-1.html",
    "href": "unit-3/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-2/page-2.html",
    "href": "unit-3/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-2/page-3.html",
    "href": "unit-3/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-2/page-4.html",
    "href": "unit-3/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-2/page-5.html",
    "href": "unit-3/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/lab-3/page-1.html",
    "href": "unit-3/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-3/page-2.html",
    "href": "unit-3/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-3/page-3.html",
    "href": "unit-3/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-3/page-4.html",
    "href": "unit-3/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-3/page-5.html",
    "href": "unit-3/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/lab-4/page-1.html",
    "href": "unit-3/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-4/page-2.html",
    "href": "unit-3/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-4/page-3.html",
    "href": "unit-3/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-4/page-4.html",
    "href": "unit-3/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-4/page-5.html",
    "href": "unit-3/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/lab-5/page-1.html",
    "href": "unit-3/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/lab-5/page-2.html",
    "href": "unit-3/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/lab-5/page-3.html",
    "href": "unit-3/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/lab-5/page-4.html",
    "href": "unit-3/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/lab-5/page-5.html",
    "href": "unit-3/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-3/optional-projects/page-1.html",
    "href": "unit-3/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-3/optional-projects/page-2.html",
    "href": "unit-3/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-3/optional-projects/page-3.html",
    "href": "unit-3/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-3/optional-projects/page-4.html",
    "href": "unit-3/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-3/optional-projects/page-5.html",
    "href": "unit-3/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/index.html",
    "href": "unit-4/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-4/lab-1/page-1.html",
    "href": "unit-4/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-4/lab-1/page-1.html#creating-an-account",
    "href": "unit-4/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-4/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-4/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-1/page-2.html",
    "href": "unit-4/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-4/lab-1/page-2.html#making-a-character-move",
    "href": "unit-4/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-4/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-4/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-1/page-3.html",
    "href": "unit-4/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-4/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-4/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html",
    "href": "unit-4/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-4/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html#keeping-score",
    "href": "unit-4/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-4/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-4/lab-1/page-4.html#ending-the-game",
    "href": "unit-4/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-1/page-5.html",
    "href": "unit-4/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/lab-2/page-1.html",
    "href": "unit-4/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-2/page-2.html",
    "href": "unit-4/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-2/page-3.html",
    "href": "unit-4/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-2/page-4.html",
    "href": "unit-4/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-2/page-5.html",
    "href": "unit-4/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/lab-3/page-1.html",
    "href": "unit-4/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-3/page-2.html",
    "href": "unit-4/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-3/page-3.html",
    "href": "unit-4/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-3/page-4.html",
    "href": "unit-4/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-3/page-5.html",
    "href": "unit-4/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/lab-4/page-1.html",
    "href": "unit-4/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-4/page-2.html",
    "href": "unit-4/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-4/page-3.html",
    "href": "unit-4/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-4/page-4.html",
    "href": "unit-4/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-4/page-5.html",
    "href": "unit-4/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/lab-5/page-1.html",
    "href": "unit-4/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/lab-5/page-2.html",
    "href": "unit-4/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/lab-5/page-3.html",
    "href": "unit-4/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/lab-5/page-4.html",
    "href": "unit-4/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/lab-5/page-5.html",
    "href": "unit-4/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-4/optional-projects/page-1.html",
    "href": "unit-4/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-4/optional-projects/page-2.html",
    "href": "unit-4/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-4/optional-projects/page-3.html",
    "href": "unit-4/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-4/optional-projects/page-4.html",
    "href": "unit-4/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-4/optional-projects/page-5.html",
    "href": "unit-4/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/index.html",
    "href": "unit-5/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Introduction to Programming\nUnit 1 is essentially an introduction to the programming that you will be working with throughout the year. In this unit, you’ll learn how to interact with sprites, how to create blocks, and iteration. In addition to these computational ideas, you’ll learn about privacy in the physical and digital realm"
  },
  {
    "objectID": "unit-5/lab-1/page-1.html",
    "href": "unit-5/lab-1/page-1.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "unit-5/lab-1/page-1.html#creating-an-account",
    "href": "unit-5/lab-1/page-1.html#creating-an-account",
    "title": "Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "unit-5/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "href": "unit-5/lab-1/page-1.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-1/page-2.html",
    "href": "unit-5/lab-1/page-2.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around."
  },
  {
    "objectID": "unit-5/lab-1/page-2.html#making-a-character-move",
    "href": "unit-5/lab-1/page-2.html#making-a-character-move",
    "title": "Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "unit-5/lab-1/page-2.html#making-the-game-challenging",
    "href": "unit-5/lab-1/page-2.html#making-the-game-challenging",
    "title": "Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-1/page-3.html",
    "href": "unit-5/lab-1/page-3.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones."
  },
  {
    "objectID": "unit-5/lab-1/page-3.html#putting-the-game-on-your-phone",
    "href": "unit-5/lab-1/page-3.html#putting-the-game-on-your-phone",
    "title": "Sharing Your Game",
    "section": "Putting the Game on Your Phone",
    "text": "Putting the Game on Your Phone\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html",
    "href": "unit-5/lab-1/page-4.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "href": "unit-5/lab-1/page-4.html#confirming-whether-alonzo-was-clicked",
    "title": "Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html#keeping-score",
    "href": "unit-5/lab-1/page-4.html#keeping-score",
    "title": "Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html#making-the-game-more-challenging",
    "href": "unit-5/lab-1/page-4.html#making-the-game-more-challenging",
    "title": "Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "unit-5/lab-1/page-4.html#ending-the-game",
    "href": "unit-5/lab-1/page-4.html#ending-the-game",
    "title": "Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-1/page-5.html",
    "href": "unit-5/lab-1/page-5.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/lab-2/page-1.html",
    "href": "unit-5/lab-2/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-2/page-2.html",
    "href": "unit-5/lab-2/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-2/page-3.html",
    "href": "unit-5/lab-2/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-2/page-4.html",
    "href": "unit-5/lab-2/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-2/page-5.html",
    "href": "unit-5/lab-2/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/lab-3/page-1.html",
    "href": "unit-5/lab-3/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-3/page-2.html",
    "href": "unit-5/lab-3/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-3/page-3.html",
    "href": "unit-5/lab-3/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-3/page-4.html",
    "href": "unit-5/lab-3/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-3/page-5.html",
    "href": "unit-5/lab-3/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/lab-4/page-1.html",
    "href": "unit-5/lab-4/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-4/page-2.html",
    "href": "unit-5/lab-4/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-4/page-3.html",
    "href": "unit-5/lab-4/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-4/page-4.html",
    "href": "unit-5/lab-4/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-4/page-5.html",
    "href": "unit-5/lab-4/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/lab-5/page-1.html",
    "href": "unit-5/lab-5/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/lab-5/page-2.html",
    "href": "unit-5/lab-5/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/lab-5/page-3.html",
    "href": "unit-5/lab-5/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/lab-5/page-4.html",
    "href": "unit-5/lab-5/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/lab-5/page-5.html",
    "href": "unit-5/lab-5/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-5/optional-projects/page-1.html",
    "href": "unit-5/optional-projects/page-1.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "unit-5/optional-projects/page-2.html",
    "href": "unit-5/optional-projects/page-2.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Programming a Game\n\n\nOn this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n  This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window. \n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n<img class=\"indent\" data-gifffer=\"/img/1-introduction/snap-blocks.gif\" alt=\"animation showing the block go to (position) being snapped inside a forever block\" title=\"animation showing the block go to (position) being snapped inside a forever block\" />\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "unit-5/optional-projects/page-3.html",
    "href": "unit-5/optional-projects/page-3.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Sharing Your Game\n\nThe game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "unit-5/optional-projects/page-4.html",
    "href": "unit-5/optional-projects/page-4.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Giving the Player Feedback\n\nNow the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "unit-5/optional-projects/page-5.html",
    "href": "unit-5/optional-projects/page-5.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "Improving Your Game\n\nThere’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "unit-6/index.html",
    "href": "unit-6/index.html",
    "title": "BHS AP CSP",
    "section": "",
    "text": "How Computers Work\nIn this unit, we’ll break down on the functionality of computers: what we know about them as we use them, the components of computers that let us use them, and what makes the components of computers work."
  },
  {
    "objectID": "unit-6/lab-2/page-1.html",
    "href": "unit-6/lab-2/page-1.html",
    "title": "A Brief History of Computers",
    "section": "",
    "text": "On this page, you will explore the long history of devices used for computation.\n\n\nWhen was the first computer built? That depends on where you draw the line between computers and non-computers.\n\n\n\n\nExplore the timeline below, which shows selected events in the history of computing starting 20,000 years ago. Decide what you think makes sense to call the first real computer.\n\n\n\n\n\n\n\n\n\nTally Sticks - First known computing aid.\n\n\n\nTally Sticks (c. 18,000 BCE)\n\n\n20,000 years ago people cut patterns of notches into animal bones. Some experts believe that tally sticks were used to perform arithmetic computations.\n\n\n\n\n\nAbacus - Ancient calculator, still in use.\n\n\n\nThe Abacus (c. 2,000 BCE)\n\n\nThe abacus is a computing device invented about 4,000 years ago. People who are well-trained to use it can perform calculations remarkably quickly, including square roots and cube roots on multi-digit numbers. In some countries, the abacus is still widely used today.\n\n\nImage by Wikimedia user HB, Public Domain.\n\n  The computation algorithms are executed by the user, not the device.\n\n\n\n\nOrrery - Mechanical device that computes planets’ orbits.\n\n\n\nThe Orrery (c. 100 BCE)\n\n\nSince antiquity, many special-purpose computing devices have been invented. For example this orrery displayed the positions of the planets in the Solar System. The first known device of this kind dated from about 2100 years ago. People at that time generally believed that the sun and other planets all revolved around the Earth, making the positions very complicated to work out, so the mechanism was much harder to design and build than it would be today.\n\nNo machine-readable image author provided. Marsyas assumed (based on copyright claims). GFDL, CC-BY-SA-3.0, or CC BY 2.5, via Wikimedia Commons.\n\n\n\n\nHere is a modern example of an orrery.\n\nImage by flickr userKaptain Kobold, licensed under the Creative Commons Attribution 2.0\n\n\n\n\n\n\n\nDifference Engine - Charles Babbage: Mechanical single-purpose computer.\n\n\n\nThe Difference Engine (c. 1822)\n\n\nIn 1822, Charles Babbage designed a device he called a “Difference Engine.” Made of precisely milled metal gears, it would compute and print tables of numbers, like log or trig functions. See more on the digital architecture page.\n\n\n\n\n\nAnalytical Engine - Babbage: First stored-program computer.\n\n\n\nThe Analytical Engine (c. 1833)\n\n\nThe Difference Engine could compute various functions by manually setting the starting position of its gears, but it had only one algorithm, built into the hardware design. In 1833, Babbage began a more ambitious project, the Analytical Engine. It was based on the general idea of the Difference Engine, but with a crucial difference: It could carry out instructions in a primitive programming language, prepared on punched cards. See more on the digital architecture page.\n\n\n\n\n\nFirst Programmer - Ada Lovelace: First to understand the potential of programs for non-numeric data.\n\n\n\nThe First Programmer (c. 1842)\n\n\nBabbage’s design was very versatile, but his interest was still mainly in printing tables of numbers. It was his collaborator Ada, Countess Lovelace, who first recognized that the numbers in Babbage’s computer could be used not only as quantities but also as representing musical notes, text characters, and so on. See more on the digital architecture page.\n\n\n\nImage by Alfred Edward Chalon, Science & Society Picture Library, Public Domain, via Wikimedia.\n\n\n\n\n\nAlan Turing wins World War II - Alan Turing leads a team that breaks the Enigma code using a very early electronic programmable computer.\n\n\n\nAlan Turing Wins World War II (1940s)\n\n\nWell, we’re exaggerating. Many people contributed to the Nazi defeat. But they weren’t all soldiers; some were mathematicians. Turing, who went on to develop the beginning ideas of computer science and to prove the Halting Theorem, which you saw in Unit 5, Lab 4: An Undecidable Problem, was the leader of a British team of mathematicians who made a breakthrough in decrypting messages encrypted with the German Enigma machine.\n\n\nCryptanalysis of the Enigma enabled western Allies in World War II to read substantial amounts of secret Morse-coded radio communications of the Axis powers. The western Supreme Allied Commander Dwight D. Eisenhower considered the military intelligence from this and other decrypted Axis radio and teleprinter transmissions “decisive” to the Allied victory…\n\n\nAlan Turing, a Cambridge University mathematician and logician, provided much of the original thinking and designed the device. Engineer Harold “Doc” Keen turned Turing’s ideas into a working machine. (adapted from Cryptanalysis of the Enigma, Wikipedia CC-BY-SA)\n\n\n\n\n\nFirst Mouse, Window System, etc. - Douglas Engelbart: An amazing number of firsts, including first hypertext, first collaborative editing, first video calling, much more.\n\n\n\n“The mother of all demos” (1960s)\n\n\nThe first public demonstration in 1968 of a mouse, colleagues separated by miles working on the same screen, and many other technologies we now take for granted was so astonishing to the audience that it became known as “the mother of all demos.” (Just search that name on Wikipedia or YouTube.)\n\n\nThe inventor of this system, Douglas Engelbart, had a lifelong interest in using technology to augment human intelligence, in particular to support collaboration among people physically distant. He studied people doing intellectual work and noted that when they’re not using a computer they don’t sit rigidly in front of their desks; they wheel their chairs around the room as they grab books or just think. So he designed an office chair attachment of a lapboard containing a keyboard and a mouse—the first mouse. He also invented a way for people to collaborate on the same page at the same time, seeing each others’ mouse cursors. Documents created in the system had hyperlinks to other documents, long before the Web was invented and used this idea. There were lots of smaller firsts, too, such as a picture-in-picture display of the other person’s face camera, long before Skype. People remember Engelbart mostly because of the mouse, but he pioneered many features of the modern graphical user interface (GUI).\n\n\n\n\n\nSketchpad - Ivan Sutherland: First object-oriented programming system, early interactive display graphics.\n\n\n\nSketchpad (1963)\n\n\nIvan Sutherland’s 1963 Ph.D. thesis project, a program to help in drawing blueprints from points, line segments and arcs of circles, pioneered both object oriented programming and the ability to draw on a screen (using a light pen; the mouse hadn’t been invented yet). It was one of the first programs with an interactive graphical user interface, so people who weren’t computer programmers could use it easily.\n\n\nSearch for “Sketchpad” on YouTube to see a demonstration of this software.\n\n\n\n\n\nARPANET - The first version of what became the Internet.\n\n\n\nARPANET (1969)\n\n\nThe Advanced Research Projects Agency\n(ARPA) of the US Defense Department was and is still the main funder of computer science research in the United States. In the late 1960s through the early 1980s they supported the development of a network connecting mainly universities with ARPA-funded projects, along with a few military bases. The initial network in 1969 consisted of four computers, three in California and one in Utah. At its peak, around 1981, there were about 200 computers on the net. With such a small number of computers, each of them knew the name and “host number” of all the others. Special gateway computers called IMPs (Interface Message Processors) were used to connect the host computers to the network, like a router today.\n\n\nOnly organizations with ARPA research grants could be on the net. This meant almost all the network sites were universities, along with a small number of technology companies doing work for ARPA. Everyone knew everyone, and so the network was built around trust. People were encouraged to use other sites’ resources; there was a yearly published directory of all the network computers, including, for most of them, information on how to log in as a guest user. It was a much friendlier spirit than today’s Internet, with millions of computers and millions of users who don’t know or trust each other. But the friendly spirit was possible only because access to the ARPANET was strongly restricted.\n\n\nThe architects of the ARPANET knew that a system requiring every computer to know the address of every other computer wasn’t going to work for a network accessible to everyone. Their plan was to build a network of networks—the Internet. The TCP/IP protocol stack was designed and tested on the ARPANET.\n\n\n\n\n\nThe Internet - First network of networks, based on TCP/IP.\n\n\n\nInternet (1986)\n\n\nGradually the ARPANET was divided into pieces. The first big pieces were MILNET for military bases and NSFnet, established in 1986 by the National Science Foundation, for research sites. This split was the beginning of the Internet. Smaller regional networks were created. Communication companies such as AT&T created commercial networks that anyone could join. Network access spread worldwide through satellite radio and through undersea cables. In 1995 the NSFnet was abolished, and everyone connected to the net through commercial Internet Service Providers.\n\n\n\n\n\nThe World Wide Web - Tim Berners-Lee: First widely available hypertext (clickable links) system.\n\n\n\nWorld Wide Web (1989-90)\n\n\nIn the early days of the net, the main application-level protocols were Telnet, which allowed a user to log in remotely to another computer, and FTP (File Transfer Protocol), for copying files from one computer to another. FTP is great if you already know what you’re looking for, and exactly where it is in the other computer’s file system.\n\n\nSeveral people had the idea of a system that would allow users to embed links to files into a conversation, so you could say “I think this document might help you.” In 1945, Vannevar Bush described a hypothetical device with the ability to embed links in files. In 1963, Ted Nelson made up the word “hypertext” as the name for this feature, but the first actual implementation was Douglas Engelbart’s system NLS, developed starting in 1963 and demonstrated in 1968.\n\n\nIn 1989, physicist Tim Berners-Lee implemented a hypertext system and named it the World Wide Web. At first it was used only by physicists, to share data and ideas. But by then the Internet was running, so his timing was right, and the name was much more appealing than the technical-sounding “hypertext” (although, as you saw in Unit 4, Lab 3: A Hierarchy of Open Protocols, behind the scenes, the protocol that makes the Web work is called the “HyperText Transfer Protocol” or HTTP). The growth of the Web was very rapid, from about 500 servers in 1993 to over 10,000 in 1994. Today, many people talk as if “the Internet” and “the Web” were the same thing, but you’ve learned that they are not in Unit 4, Lab 1: What Is the Internet?.\n\n\nBerners-Lee’s vision was of a Web in which everyone would be both a creator and a consumer of information. But the Web quickly became a largely one-way communication, with a few commercial websites getting most of the traffic. Today, most Web traffic goes to Google, Facebook, CNN, Amazon, and a few others. But some degree of democracy came back to the Web with the invention of the blog (short for “web log”) in which ordinary people can post their opinions and hope that other people will notice them.\n\n\n\n\n\nFirst Smartphones - First portable devices combining cell phone with pocket computer.\n\n\n\nSmartphones (1990s)\n\n\nThe first device that could be thought of as a smartphone was demonstrated in 1992 and available for sale in 1994. But through the 1990s, people who wanted portable digital devices could get a cell phone without apps, and a “personal digital assistant” (PDA) that did run apps but couldn’t make phone calls. Around 1999, a few companies developed devices with the phone and the PDA in one housing, sharing the screen but essentially two separate computers in one box. The Kyocera 6035, in the photo, was a telephone with the flap closed, but was a Palm Pilot PDA with the flap open.\n\n\nKyocera 6035  image by KeithTyler, Public Domain\n\n\nThere is something weird about this image file, and I can’t figure it out. Moving on. –MF, 12/7/17\n\n\n\nIt was in the late 2000s that the two functions of a smartphone were combined in a single processor, with the telephone dialer as just one application-level program.\n\n\n\n\n\nChess program beats world champion - Deep Fritz program beats Vladimir Kramnik.\n\n\n\nChess program beats world champion (2006)\n\n\nProgrammers have been trying to design and build chess programs since at least 1941 (Konrad Zuse). Over the following decade, several of the leading computer science researchers (including Alan Turing, in 1951) published ideas for chess algorithms, but the first actual running programs came in 1957. In 1978, a chess program won a game against a human chess master, David Levy, but Levy won the six-game match 4½–1½. (The half points mean that one game was a tie.)\n\n\nThere are only finitely many possible chess positions, so in principle a program could work through all possible games and produce a complete dictionary of the best possible move for each player from each position. But there are about 1043 board positions, and in 1950, Claude Shannon estimated that there are about 10120 possible games, far beyond the capacity of even the latest, fastest computers. Chess programs, just like human players, can only work out all possible outcomes of the next few moves, and must then make informed guesses about which possible outcome is the best.\n\n\nA turning point in computer chess came in 1981, when the program Cray Blitz was the first to win a tournament, beat a human chess master, and earn a chess master rating for itself. The following year, the program Belle became the second computer program with a chess master rating. In 1988 two chess programs, HiTech and Deep Thought, beat human chess grandmasters.\n\n\nIn 1997, Deep Blue, an IBM-built special-purpose computer just to play chess, with 30 processors plus 480 special-purpose ICs to evaluate positions, beat world chess champion Garry Kasparov in a six-game match, 3½–2½. Its special hardware allowed Deep Blue to evaluate 200 million board positions per second.\n\n\nIn 2006, world chess champion Vladimir Kramnik was defeated 4-2 in a six-game match by Deep Fritz, a chess program running on an ordinary computer. Although the score looks overwhelming, one of the games Deep Fritz won was almost a win for Kramnik, who failed to see a winning move for himself and instead set up the computer for a one-move checkmate. Without this blunder, the match would have been tied 3–3.\n\n\nChess programs continue to improve. In 2009, the program Pocket Fritz 4, running on a cell phone, won a tournament and reached grandmaster rating. The program, in contrast to Deep Blue, could evaluate only 20,000 positions per second, so this win shows an improvement in strategy, not just an improvement in brute force computer speed.\n\n\n\n\n\nSiri - Apple’s personal assistant for the iPhone.\n\n\n\nSiri (2011)\n\n\nSiri is Apple’s personal assistant software. It was first released as a third-party app in the App Store in 2010; Apple then bought the company that made it, and included Siri as part of iOS in 2011.\n\n\nSiri was not the first program to understand speech. Dragon Dictate, a speech-to-text program was released in 1990. Research laboratory efforts started much earlier than that; in 1952, a program developed at Bell Labs was able to understand spoken digits. As time went on, the number of words understood by the programs increased. In 2002, Microsoft introduced a version of its Office programs (including Word) that would take spoken dictation.\n\n\nIn 2006, the National Security Administration (NSA) started using software to recognize keywords in the telephone calls it spies on.\n\n\nThe first cell phone app using speech recognition was Google’s Voice Search in 2008, but it just entered the words it heard in a search bar without trying to understand them. What was new in Siri wasn’t speech recognition, but its ability to understand the sentences spoken by its users as commands to do something: “Call Fred,” “Make an appointment with Sarah for 3pm tomorrow,” and so on.\n\n\nReviews of Siri’s performance in 2011 weren’t all good. It had trouble understanding Southern US or Scottish accents. It had a lot of trouble with grammatically ambiguous sentences. Its knowledge of local landmarks was spotty. Nevertheless, it prompted a new surge of buyers of Apple telephones.\n\n\nMore recently, Microsoft (Cortana), Amazon (Alexa), and Google (Assistant) have introduced competing speech-based personal assistant programs.\n\n\n\n\n\nPokémon Go - First widely used augmented reality game.\n\n\n\nPokémon Go (2016)\n\n\nAugmented reality is a technique in which the user sees the real world, but with additional pictures or text superimposed on it. Although it had been used earlier, the first major public exposure to augmented reality was in the game Pokémon Go. Players walk around while looking at their phone screens, which show what the camera is seeing, but with the occasional addition of a cartoon character for the player to catch. Every player looking at the same place sees the same character, because the game uses the phone’s GPS to locate the player.\n\n\nThe programming of the game was impressive, but even more impressive was the effort the developers put into placing the cartoon characters at locations around the world that are accessible, open to the public, and not offensive. (Niantic, the company that developed the game, had to remove some locations from their list because of complaints, including cemeteries and Holocaust museums.)\n\n\nThe game was downloaded over 500 million times in 2016, and, unusually for a video game, was enthusiastically supported by many players’ parents, because the game gets players out of the house, and getting exercise from walking around. Also, because players congregate at the locations of Pokémon, the game encouraged real-life friendships among players. On the other hand, there were safety concerns, partly because players would cross streets staring into their phones instead of watching for traffic, and partly because certain Pokémon were placed in front of fire stations, or in locations that encouraged players to cross railroad tracks.\n\n\n\n\n\nIBM Quantum Experience - A 16-qubit quantum computer available for free use on the Internet.\n\n\n\nIBM Quantum Experience (QX) (2017)\n\n\nIBM first put a five-qubit (quantum bit) quantum computer on the Internet in 2016 (see Quantum Computing - IBM Q - US), but the following year they added a much more powerful 16-qubit computer. (The qubit is the equivalent for quantum computers of a bit in ordinary computers.) Anyone can use it, free of charge, although there is always a waiting list for appointments.\n\n\nThe usual oversimplified description of quantum computing is that a qubit (pronounced “Q bit”) is “both zero and one at the same time.” It’s closer to say that a qubit is either zero or one, but we don’t know which until it is examined at the end of a computation, at which point it becomes an ordinary bit with a fixed value. This means that a quantum computer with 16 qubits isn’t quite as powerful as 216\nseparate computers trying every possible combination of bit values in parallel. We know that certain exponential-time algorithms can be solved in polynomial time by quantum computers, and we know that certain others can’t, but there is still a big middle ground of exponential-time algorithms for which we don’t know how fast quantum computers can be.\n\n\nThe IBM QX has been used for a wide variety of quantum computations, ranging from academic research to a multiplayer Quantum Battleship game.\n\n\n\n\n\n\n\nLook at the timeline. The year markers at the bottom are equally spaced, but the number of years between them is not the same. The number of years does change in a regular way from marker to marker: right to left it goes up by a multiple of ten. We call such a scale logarithmic.\n\n\n\n\nDiscussion:\n\n\nDoes a device have to be programmable to be a computer?\n\n\nDoes it have to operate by itself?\n\n\n\n\n\n\nHere are two key ideas:\n\n\nSoftware, in the form of a program stored in the computer’s memory, is, itself, a kind of abstraction. It is what makes a computer usable for more than one purpose.\n\n\nWe didn’t get usable computers until there was an underlying technology (the transistor) small enough, inexpensive enough, and fast enough to support the program abstraction."
  },
  {
    "objectID": "unit-6/lab-2/page-2.html",
    "href": "unit-6/lab-2/page-2.html",
    "title": "Moore’s Law",
    "section": "",
    "text": "On this page, you’ll learn that computer processor speed and memory size have approximately doubled every year or two, for over 50 years.\nIn 1965, Gordon Moore, one of the pioneers of integrated circuits, predicted that the number of transistors that could be fit on one chip would double every year. In 1975, he revised his estimate to doubling every two years. This prediction is known as Moore’s Law.\nIt turns out that other important measurements have also shown roughly the same doubling behavior, such as processor speed and the amount of memory that fits in a computer. Doubling hardware speed improves the size of problems that you can efficiently handle.\nThe importance of Moore’s Law isn’t just that computers get bigger and faster over time; it’s that engineers can predict how much bigger and faster, which helps them plan the software and hardware development projects to start today, for use five years from now."
  },
  {
    "objectID": "unit-6/lab-2/page-2.html#limitations-to-moores-law",
    "href": "unit-6/lab-2/page-2.html#limitations-to-moores-law",
    "title": "Moore’s Law",
    "section": "Limitations to Moore’s Law",
    "text": "Limitations to Moore’s Law\n\n\nFor transistor counts to keep growing, the size of a transistor must keep getting smaller. But chip density and processor speed have run up against an important limit: denser chips and faster signal processing both generate increased heat. Current technology is right at the edge of generating enough heat to melt the chips, destroying the computer. This is why processor chips are surrounded by metal heat sinks (one shown right), which conduct heat away from the chip and into the air.\n\n\n\n\nHeat sinks aren’t solid blocks of metal; they have spikes and zigzags. Figure out or look up why.\n\n\n\n\nBecause of the heat problem, chip manufacturers have, at least temporarily, given up on making processors faster. Instead, they are putting more than one processor on a chip. If a computation can carry out the same algorithm on different parts of the data at the same time (in parallel—sort of like sprite clones all running the same script at the same time), then these multicore chips can have an effective speed much greater than the speed of a single processor. A computer you buy today is likely to have two or four processors on one chip. But using multicore efficiently requires that the software be written with multicore in mind.\n\n\nLearn about limitations to Moore’s Law.\n\n\nSome time in the next decade, the size of a transistor will approach the size of an atom, but at the atomic scale, transistors won’t work for various reasons. There is a more fundamental limit to the density of transistors on a chip than just heat issues. And similarly, there are fundamental limitations that affect the speed of a processor, such as the speed of electrons through a wire.\n\n\nMoore’s Law optimists argue that technologies other than transistors will become usable before manufacturers hit a fundamental limit. One such approach would involve using an individual electron to represent one bit. Electrons are smaller than atoms, so this technology would allow further dramatic increases in density. Another approach would use light beams rather than electric current to hold bits. But these developments are still far away.\n\n\n\n\n\n\n\n\n\nAs Gordon Moore observed in 1965, data show that computer processing speeds roughly double every two years. Technology companies use this observation, now known as “Moore’s Law,’ in their planning. From the following, identify which one best describes how technology companies can use Moore’s Law in planning.\n\n\n\nThey can expect to double their profits every two years.\n\n\nNo such thing is possible to predict using Moore’s Law.\n\n\n\n\nThey can anticipate the precise dates when the latest computing advancements will be available and therefore accurately plan their products in advance.\n\n\nNo such thing is possible to predict using Moore’s Law.\n\n\n\n\nThey can base their R&D (Research and Development) targets on expected future processing speeds.\n\n\nCorrect.\n\n\n\n\nThey can expect their costs to double with each increase in processor speed.\n\n\nNo such thing is possible to predict using Moore’s Law."
  }
]